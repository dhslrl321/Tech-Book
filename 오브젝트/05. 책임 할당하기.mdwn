# 책임 할당하기

- 책임 주도 설계의 핵심은 **행동**이다
- 데이터보다 행동을 먼저 생각하라
  - 즉, 어떤 객게에게 어떤 책임을 할당해야 하는가를 생각해야 한다
  - 데이터 중심 설계에서는 : 데이터를 결정하고 오퍼레이션을 결정하는데,
  - 책임 중심 설계에서는 : 수행할 책임을 결정하고 필요한 데이터를 결정한다
- 객체가 존재해서 메시지가 있는 것이 아니고, 메시지가 존재하기 때문에 책임이 존재하는 것이다

# 책임 주도 설계

- 책임 주도 설계의 방법
  - 시스템이 사용자 제공하는 기능인 시스템 책임을 파악한다
  - 시스템의 책임을 더 작은 책임으로 분리한다
  - 분할된 책임을 수행할 수 있는 적절한 객체를 찾는다
  - 객체가 책임을 수행하는 도중에 도움이 필요한 경우 이를 협력을 통해 해결한다
- 핵심은 책임을 정한 후에 책임을 수행할 객체를 결정하는 것이다
- 설계의 시작은 역시 '도메인'이다
  - 도메인이 중요하다고 해서 도메인을 모두 이해해야 하는 것은 아니다.
  - poc 와 코딩을 통해서 **발견**하는 것이다

# 정보 전문가 패턴

- 어떤 일을 처리할 떄 수행할 정보를 가장 많이 알고있는 객체에게 책임을 할당하는 것
  - 정보 전문가가 데이터 소유자는 아닐 수 있다.
  - 정보가 데이터는 아니다
- 순서
  1. 메시지를 생각한다.
  2. 메시지를 처리하기 위해 해당 메시지와 가장 관련이 높은 객체를 찾는다.

# 높은 응집도 패턴

- 응집력을 높여서 변화에 영향을 줄이는 것

# 낮은 결합도 패턴

- 의존을 낮춰서 변화에 영향을 줄이는 것
- 높은 응집도와 낮은 결합도 패턴은 매 설계다마 품질을 검토하면 좋다

# 창조자 패턴

- 객체 생성의 책임은 생성될 객체에 대해서 잘 알고 있거나 긴밀하게 사용할 때 결합을 인정하고 해당 객체에게 생성을 위임하는 것이다
  - 어떤 객체를 포함하거나 참조하거나
  - 객체를 초기화하는데 필요한 데이터 모두를 가지고있거나

# 다형성 패턴

- 객체의 타입에 따라서 행동이 변한다면 타입을 분리하고 변화하는 행동을 각 타입의 책임으로 부여할 수 있다.
  - 각 타입은 인터페이스의 구현체 들이고 행동은 각 구현에서 책임진다.

# 책임 주도 설계의 대안

- 처음 부터 책임 주도 설계를 하는 것이 올바르지 않을 수 있다.
- 리팩토링을 통해서 서서히 걷어내면 된다
  - 하지만 이것 또한 '인터페이스'로 협력에 대해 역할 설정과 캡슐화가 잘 설계해야 가능한 이야기다.
