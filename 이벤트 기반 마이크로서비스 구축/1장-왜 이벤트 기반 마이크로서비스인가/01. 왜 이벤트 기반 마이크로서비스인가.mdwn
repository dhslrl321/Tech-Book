### 목차

- 이벤트 기반 통신 구조
- 동기식 마이크로서비스 단점

# 이벤트 기반 통신 구조

- 이벤트 기반 통신은 요청-응답 기반 통신의 대안
  - 왜 나오게 된거지?
  - 요청-응답 통신은 확장성이 뛰어나지 않다?

## 이벤트는 통신의 근간

- 공유되는 데이터는 모두 이벤트 스트림에 발행함
  - 시스템에서 일어난 모든 일이 지속적으로 정규화된 형태로 저장됨
  - 시스템이 서로 통신하는 채널이 됨
- 이벤트가 곧 데이터
- 이벤트가 데이터 스토리지일 뿐 아니라 서비스간의 비동기 통신 수단

## 이벤트 스트림은 단일 진실 공급원

- 이벤트는 사실 진술서 (statement of truth) 이다
- 이벤트 스트림은 단일 진실 공급원 (single source of truth) 이다
  - 스트림에 존재하는 이벤트들을 모아보면 시스템에서 발생한 모든 사실들을 모을 수 있음
- 팀마다 상충되는 데이터를 서로 각기 다른 곳에 두면 이벤트 스트림은 조직 데이터의 통신 백본 역할을 수행하지 못함

## 컨슈머가 스스로 모델링과 쿼리를 수행

- 모든 비즈니스 로직 및 애플리케이션 로직은 이벤트 producer/consumer 안에 캡슐화 되어야 함
- 모든 데이터 접근은 컨슈머를 통해서 이루어진다.
  - 모델링도 컨슈머를 통해서 수행된다.
  - 컨슈머는 이벤트 스트림에서 받은 이벤트의 사본을 가져온다.
- 이전 구현 통신이라면 사용 목적에 맞게 API 를 설계하고 쿼리 메커니즘을 **제공**해줬음
  - 하지만 이제는 사용하는 바운디드 컨텍스트에서 니즈를 스스로 파악하고 해결함

## 조직의 통신이 원활해짐

- 다른 팀/서비스에서 관심있는 데이터는 공용 이벤트 스트림으로 발행해서 데이터의 생산과 소유권을 분리 가능
  - 이벤트를 발행하는 곳 : 데이터 생산
  - 이벤트를 소비하는 곳 : 데이터 소유
- 이로 인해서 데이터 통신 구조를 정규화하고 느슨한 결합과 높은 응집의 이점을 가짐

# 동기식 마이크로서비스 단점

- 점대점 결합
- 의존적 확장
- 서비스 실패 처리
- API 버저닝와 디펜던시 관리
- 데이터 접근이 구현체에 종속됨
- 분산 모놀리스
- 테스트
