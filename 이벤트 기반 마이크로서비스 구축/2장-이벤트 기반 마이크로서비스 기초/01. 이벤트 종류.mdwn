# 이벤트 구조 및 종류

- 보통 이벤트는 key/value 형태로 표현
  - key 는 필수가 아님
  - key 는 필요에 따라서 선택사항
    - key 가 있으면
      - 해당 이벤트를 식별할 수 있음
      - 라우팅 정보로 사용될 수 있음
      - 특정 키를 토대로 aggregation 할 수 있음
    - key 는 딱 일반적으로 생각하는 그 용도인듯
  - value 도 역시 동일하게 일반적으로 아는 상식선
    - key 에 대한 세부 정보
- 이벤트는 3가지로 구분됨
  1. unkeyed event
  2. entity event
  3. keyed event

# unkeyed event

- 하나의 사실을 진술한 형태로 나타내는 이벤트
  - 어떤 시스템과 상호작용한 사실을 나타낼 때 사용
  - 일종의 로그성

```json
{
  "key": null,
  "value": "file downloaded"
}
```

# entity event

- entity 는 유일한 것으로 유일한 ID 가 부여됨
- 어떤 시점의 엔티티 속성 및 상태를 기술
- 유일한 엔티티에 관한 모든 필요한 정보는 value 필드에 존재
- 장점? 용도?
  - 엔티티의 연속된 이력을 제공
  - 상태를 구체화 (materialize)
- 이벤트 기반 아키텍처에서 중요한 요소
  - 엔티티의 현재 상태는 가장 마지막 엔티티 이벤트만 있어도 알 수 있어야 함

# keyed event

- key 를 포함하지만 엔티티를 나타내지는 않음
- 이벤트 스트림의 한 파티션 내에서 데이터 지역성(locality)을 보장하기 위함
  - 데이터 지역성
- 이벤트 스트림을 파티셔닝 하는 용도로 쓰임
  - ??? 뭔소리여, 일단 후반부에서 설명한다고 함
- 특정 key 에 대한 aggregation 이 가능함

```json
{
  "key": ISBN:159237,
  "value": "userId: 9127"
}
```

- 툼스톤 이벤트
