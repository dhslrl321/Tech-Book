[개발자 책읽기] 테스트 주도 개발 - 켄트 벡 (객체 만들기)

> 해당 글은 Kent-Beck의 **테스트 주도 개발** _By Example_ 이라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 테스트 주도 개발](http://m.yes24.com/goods/detail/12246033) 에서 확인해주세요.

#### 테스트 주도 개발 - Test Driven Development By Example (Kent-Beck)

- 인사이트(insight)
- 지은이: Kent-Beck
- 엮은이: 김창준, 강규역
- 출간일: 2014.02.15

[##_Image|kage@brjUt4/btq1XL8f5Ec/j4jCTP2njlIi4U5WRS5FF0/img.png|alignCenter|data-origin-width="0" data-origin-height="0" width="334" height="NaN" data-ke-mobilestyle="widthContent"|||_##]

# 객체 만들기

여기 Dollar 클래스와 Franc클래스의 `times()` 메서드를 확인해보자.

```java
class Dollar extends Money{
  // ... 생략
  public Dollar times(int multiplier) {
    return new Dollar(amount * multiplier);
  }
}
class Franc extends Money {
  // ... 생략
  public Franc times(int multiplier) {
    return new Franc(amount * multiplier);
  }
}
```

아주 거의 비슷하다.

여기서 반환하는 객체를 `Money`로 바꿔주면 더욱 비슷해진다.

여기서 만약 times를 공통으로 뻈다고 치자, 그럼 Dollar와 Franc는 아무것도 없는 선언만 존재하는 빈 클래스가 된다.

이 둘의 무의미함을 한번에 없애고싶지만 너무 큰 일이라 **작은 일부터 테스트로 수행해가는** TDD의 목적에 알맞지 않다.

작은 것부터 해보자.

## Dollar와 Franc을 없애기 위한 노력

### 1. 직접 참조를 없애자.

여기서 작은 것이란 Money의 하위 클래스인 Dollar와 Franc에 대한 직접 참조가 적어진다면 Dollar와 Franc을 제거하는데 더욱 쉬울 것 같다.

우선 우리는 Factory Method 패턴을 사용할 것이다.

Factory Method 패턴을 통해서 `Dollar`가 혹은 `Franc`이 직접 객체를 만들지 않고 `Money`에서 각각 `Dollar`와 `Franc`를 만들도록 하면 아마 다음과 같은 그림이 나올 것이다.
TDD답게 테스트를 먼저 추가 해보자.

```java
void testMultiplication() {
  Dollar five = Money.dollar(5);
  assertEquals(new Dollar(10), five.times(2));
  assertEquals(new Dollar(15), five.times(3));
}
```

그럼 당연히 실패한다.
이유는 Money에 dollar라는 메서드가 없어서이다.
재빠르게 Green으로 가보자.

```java
static Dollar dollar(int amount) {
  return new Dollar(amount);
}
```

이제 Green이 되었다.

우리가 원하는 것은 직접 참조를 없애는 것이기 때문에 `five`라는 인스턴스 변수가 아예 `Money`라는 클래스가 되면 직접 참조가 사라질 것 같다.

```java
void testMultiplication() {
  Money five = Money.dollar(5);
  assertEquals(new Dollar(10), five.times(2));
  assertEquals(new Dollar(15), five.times(3));
}
```

그럼 당연히 실패한다.
왜? Money 클래스에는 `times`메서드가 존재하지 않기 때문이다.
뭔가 기쁘다.
우리가 없애고 싶은 것은 `times` 메서드를 통일하는 것인데, 여기선 지금 Money 클래스에 times가 없어서, 즉 통일되지 않아서 오류를 뿜고 있기 때문이다.

우리가 이 문제만 넘어간다면 times를 통일 시킬 수 있다!

여기서 Money 클래스를 추상 클래스로 바꾸고 times 를 추상 메서드로 바꿔서 **하위 클래스가 구현**하도록 하면 좋을 것 같다.

```java
abstract class Money {

  abstract Money times(int multiplier);

  protected int amount;

  static Dollar dollar(int amount) {
    return new Dollar(amount);
  }

  // ... 생략
}
```

그럼 `tiems` 메서드가 존재하지 않는다는 오류는 사라지는 것을 알 수 있다.

이제 우리가 변경한 것에 어울리게 테스트 코드에서 하위 클래스를 직접 호출하는 코드를 바꿔보자.

Dollar나 Franc을 Money로 바꾸면 된다.

```java
public class MainTest {
  @Test
  public void testMultiplication() {
    Money five = Money.dollar(5);
    assertEquals(Money.dollar(10), five.times(2));
    assertEquals(Money.dollar(15), five.times(3));
  }

  @Test
  public void testEquality() {
    assertEquals(Money.dollar(5), Money.dollar(5));
    assertNotEquals(Money.dollar(5), Money.dollar(10));
    assertNotEquals(Money.franc(5), Money.franc(15));
  }
}
```

```java
abstract class Money {
  protected int amount;

  abstract Money times(int multiplier);

  static Dollar dollar(int amount) {
      return new Dollar(amount);
  }

  static Franc franc(int amount) {
      return new Franc(amount);
  }
  // ... 생략
}
```
