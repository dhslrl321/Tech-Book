[개발자 책읽기] 테스트 주도 개발 - 켄트 벡 (모두를 위한 평등)

> 해당 글은 Kent-Beck의 **테스트 주도 개발** _By Example_ 이라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 테스트 주도 개발](http://m.yes24.com/goods/detail/12246033) 에서 확인해주세요.

#### 테스트 주도 개발 - Test Driven Development By Example (Kent-Beck)

- 인사이트(insight)
- 지은이: Kent-Beck
- 엮은이: 김창준, 강규역
- 출간일: 2014.02.15

[##_Image|kage@brjUt4/btq1XL8f5Ec/j4jCTP2njlIi4U5WRS5FF0/img.png|alignCenter|data-origin-width="0" data-origin-height="0" width="334" height="NaN" data-ke-mobilestyle="widthContent"|||_##]

# 모두를 위한 평등

우리는 Dollar 객체를 값처럼 사용하고 있다.
이런 Dollar 객체를 VO 패턴을 적용한 객체라고 한다.
해당 장에서는 VO에 대한 개념이 잠깐 등장한다.

# TDD 일반화

1. 작은 테스트를 추가한다.
2. 모든 테스트를 실행해서 테스트가 실패하는 것을 확인한다.
3. 조금 수정한다.
4. 모든 테스트를 실행해서 테스트가 성공하는 것을 확인한다.
5. 중복을 제거하기 위해서 리팩토링을 수행한다.

### Value Object

객체 값 패턴에서 2가지 특성이 존재한다.

1. 불변성
2. 동일성

**불변성**
VO 패턴에서 객체 값이 생성이 되면 절대로 setter나 프로퍼티 값 접근을 통해서 새로운 값이 할당되면 안된다.
한 번 생성자로 생성되었다면 그 값은 불변해야 한다.
그리고 만약 특정 연산을 수행했다면 새로운 객체를 반환해야 한다
**동일성**
VO 패턴의 또다른 특징중 하나는 동일한 객체여야 한다.

# equals

우리의 VO객체가 VO가 되려면 앞선 2가지 상황을 만족해야 한다.
첫 번째의 특성은 이미 확인을 했고 (지난 시간에)
두 번째 특성을 지금 확인하기 위해서 `equals` 메서드를 생성하자
TDD 스럽게

## equals 메서드

```java
@Test
public void testEquality() {
    assertTrue(new Dollar(5).equals(new Dollar(5)));
}

class Dollar {
    // ... 생략
    boolean equals(Dollar dollar) {
        return true;
    }
}
```

처음 assertTrue를 실행하면 당연히 실패하는 코드가 나오게 된다.
이제 성공하는 Green 사이클을 보기 위해서 빠르게 return을 위와 같이 수정해주자.

# 리팩토링 하기 힘들 때 사용하는, 삼각 층량 방법

삼각측량이란 어떤 한 라디오 송신국에서 두 개의 수신국으로 라디오를 쏘면 송신국의 정확한 위치를 알 수 있는 방법이다.

이를 코드에 적용시켜보자.

`testEquality()` 에서는 무조건 통과할 수 밖에 없다.
왜냐면 빨리 green 사이클을 보기 위해서 죄악을 저질렀기 때문에.
하지만 이게 Code That Works. 동작하는 코드가 되기 위해서는 적절한 로직이 필요하다.
이를 삼각 층량 느낌으로, `assertTrue`에 `assertFalse`도 추가시켜보자.

```java
@Test
public void testEquality() {
    assertTrue(new Dollar(5).equals(new Dollar(5)));
    assertFalse(new Dollar(5).equals(new Dollar(10)));
}
```

테스트에 실패한다.
왜냐면 우리가 equal 메서드는 무조건 true를 반환하게 했기 때문.
이제 테스트에 성공하기 위해서는 실제 로직이 들어간 코드를 짜야 한다.

## 삼각 측량에 대한 켄트 벡의 생각

삼각 측량은 사실 중복되는 코드가 발생할 수 밖에 없다.
원래라면 테스트를 한 번에 통과시키고 잘 동작하는 코드를 짜는게 맞지만, 그렇지 못할 경우도 발생한다.
켄트 벡은 삼각 측량이 항상 쓰이는 것은 비효율적이라고 생각하기 때문에 꼭 필요할 때 (리팩토링을 어떻게 수행해야할지 생각이 나지 않을 떄 사용해야 한다고 한다.)
