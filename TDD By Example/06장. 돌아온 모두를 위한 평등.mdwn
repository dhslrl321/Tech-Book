[개발자 책읽기] 테스트 주도 개발 - 켄트 벡 (돌아온 모두를 위한 평등)

> 해당 글은 Kent-Beck의 **테스트 주도 개발** _By Example_ 이라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 테스트 주도 개발](http://m.yes24.com/goods/detail/12246033) 에서 확인해주세요.

#### 테스트 주도 개발 - Test Driven Development By Example (Kent-Beck)

- 인사이트(insight)
- 지은이: Kent-Beck
- 엮은이: 김창준, 강규역
- 출간일: 2014.02.15

[##_Image|kage@brjUt4/btq1XL8f5Ec/j4jCTP2njlIi4U5WRS5FF0/img.png|alignCenter|data-origin-width="0" data-origin-height="0" width="334" height="NaN" data-ke-mobilestyle="widthContent"|||_##]

# 돌아온 모두를 위한 평등

지난 시간에 우리는 Dollar와 Franc을 통화를 지원하기 위해서 Dollar 클래스를 복사하여 Franc 클래스를 생성했다.

켄트 벡 형님이 말씀하시는 1 ~ 4단계 까지 매우 빠른 시간 안에 도착했는데, 문제가 있더라.

바로 엄청난 중복.

그냥 중복 덩어리이다.

이 중복 덩어리를 해결하기 위해서 우리는 어떤 방법을 선택할 수 있을까?

## 상속

바로 상속을 이용할 수 있다.
동일한 기능을 수행하는 클래스 2개가 존재한다면 상위 클래스 하나를 작성하면 해결될 수 있다.

```java
class Dollar {
  private int amount;
  Dollar(int amount) {
    this.amount = amount;
  };

  public Dollar times(int multiplier) {
    return new Dollar(amount * multiplier);
  }

  public boolean equals(Object object) {
    Dollar dollar = (Dollar) object;
    return amount == dollar.amount;
  }
}
class Franc {
  private int amount;
  Franc(int amount) {
    this.amount = amount;
  };

  public Franc times(int multiplier) {
    return new Franc(amount * multiplier);
  }

  public boolean equals(Object object) {
    Franc franc = (Franc) object;
    return amount == franc.amount;
  }
}
```

에서

```java

class Money {

}

class Dollar extends Money{
  private int amount;
  // ... 생략
}
class Franc extends Money {
  private int amount;
  // ... 생략
}
```

이제 `amount` 또한 옮길 수 있다.

```java

class Money {
  protected int amount
}

class Dollar extends Money{
  // ... 생략
}
class Franc extends Money {
  // ... 생략
}
```

오류가 발생하지 않는다.

이와 같은 방법으로 `equals()`를 Money로 옮기면 중복이 일단 사라진다.
