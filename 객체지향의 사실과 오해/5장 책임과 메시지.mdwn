[개발자 책읽기] 객체지향의 사실과 오해-조영호 (n장 제목)

> 해당 글은 조영호님의 **객체지향의 사실과 오해** _역할, 책임, 협력, 관점에서 본 객체지향_ 라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 객체지향의 사실과 오해](http://www.yes24.com/Product/Goods/18249021) 에서 확인해주세요.

#### 객체지향의 사실과 오해 - 역할, 책임, 협력 관점에서 본 객체지향 (조영호)

- 위키북스
- 지은이: 조영호
- 펴낸이: 박찬규, 엮은이: 이대엽, 디자인: 북누리
- 1쇄 발행: 2015.06.17

[##_Image|kage@brjUt4/btq1XL8f5Ec/j4jCTP2njlIi4U5WRS5FF0/img.png|alignCenter|data-origin-width="0" data-origin-height="0" width="334" height="NaN" data-ke-mobilestyle="widthContent"|||_##]

---

# 이번 장에서 이야기하고자 하는 것

- **책임과 메시지**
  - 책임감 분산
    - 사건에 대한 목격자가 많으면 많을수록 개인이 느끼는 책임감은 적어짐
  - 명확한 책임과 역할을 지닌 참가자들만 협력에 참여해야 함
- **자율적인 책임**
  - 책임은 동일한 결과를 요구하지만 행동은 각자가 자율적으로 결정함
  - 객체가 자율적이기 위해서는 객체엑 할당되는 책임의 수준 역시 자율적이어야 함
    - 하지만 **너무 추상적인 책임**은 오히려 독이될 수 있음
  - 자율적인 객체의 특징은 **어떻게가 아니라 무엇을** 해야하는가 설명하는 것임
- **메시지와 메서드**
  - 객체가 다른 객체에게 접근하기 위해서는 **메시지를 전송함**
  - 메시지를 전송할 때 추가적인 정보를 함께 보내는 경우에는 **인자 Argument**를 이용함
    - `수신자.메시지(인자, 인자2)` 형태
  - 메시지를 받는 수신자 입장에서는 해당 메시지를 처리하기 위해서 스스로 자율적이게 **메서드를 이용함**
    - 메시지 송신자는 **무엇을** 을 메시지를 통해서 전달
    - 메시지 수신자는 **어떻게** 를 메서드를 통해서 도출
- **다형성**
  - 서로 다른 유형의 객체가 동일한 메시지에 대해서 서로 다르게 반응하는 것
    - _서로 다른 타입인 객체가 동일한 메시지를 수신할 경우 서로 다른 메서드로 응답하는 메커니즘_
  - 다형성을 쓰는 이유?
    - **대체 가능성**을 암시
    - 수신자의 종류를 **캡슐화**
    - 재사용을 가능하게 함
- **객체지향의 핵심, 메시지**
  - 클래스는 객체지향의 핵심이 아님
    - 단지 코드를 구현하기 위한 도구일 뿐
  - 객체지향의 진정한 강력함은 클래스의 객체들이 주고받는 메시지에서 나오게 됨
  - 훌륭한 객체지향은
    - 어떤 객체가 어떤 메시지를 선송할 수 있는가
    - 어떤 객체가 어떤 메시지를 수신할 수 있는가
    - 객체 사이의 협력 관계
- **책임 주도 설계 다시 살펴보기**
  - 객체지향 설계 : 적절한 책임을 적절한 객체에게 할당하여 메시지를 기반으로 협력하는 객체의 관계를 설계하는 과정
  - 이 책임을 완수하기 위한 협력하는 객체를 이용해서 설계하는 방법이 바로 **책임-주도 설계**
    - 역할 책임 협력으로 시스템을 식별
    - 특정 객체가 책임을 완수하기 위해서 다른 객체의 도움이 필요하다고 느끼면 어떤 메시지가 필요한지 식별
- **What/Who** 사이클
  - 객체 사이의 협력 관계를 설계하기 위해서는 먼저 **어떤 행위를 수행할 것인지 결정한 뒤 누가 그 행위를 수행할지** 결정
  - 메시지가 결정된 후에 메시지를 수신할 후보를 선택
- **묻지 말고 시켜라**
  - 메시지를 먼저 결정하고 객체가 메시지를 따르게 하는 설계 방식
  - 객체는 다른 객체의 상태를 묻지 않아야 함
    - 상태를 묻는다는 것은 메시지를 전송하기 이전에 객체가 가져야하는 생테에 많이 고민하고 있다는 것
  - 필요한 메시지만 전송하고 메시지를 수신하는 객체가 스스로 메시지 처리 방법을 결정하게 둬라
- **객체 인터페이스**
  - 어떤 두 사물이 마주치는 경계 지점에서 서로 상호작용할 수 있게 이어주는 방법이나 장치
  - 인터페이스의 세 가지 특성
    1. 인터페이스의 사용법만 안다면 대상의 내부 구조나 동작 방법을 몰라도 된다.
    2. 인터페이스가 변경되지 않고 단순히 핸부 구성이나 작동 방식이 변경되는 것은 사용자에게 영향을 미치지 않는다.
    3. 언터페이스가 동일하다면 어떤 대상과도 상호작용이 가능하다.
- **인터페이스와 구현의 분리**
  - 인터페이스의 원칙
    1. 인터페이스는 추상적이어야 한다.
    2. 외부에서 사용할 필요가 없는 인터페이스는 노출하지 않아야 한다.
    3. 인터페이스와 구현간에는 차이가 있어야 한다.
  - 구현
    - 내부 구조와 작동 방식
- **인터페이스와 구현의 분리 원칙**
  - 훌륭한 객체는 구현을 모른 채 인터페이스만 알면 쉽게 상호작용할 수 있는 객체
  - 객체 외부에 노출되는 인터페이스와 객체의 내부에 숨겨지는 구현을 명확하게 분리해서 생각해야 함
- **책임의 자율성이 협력의 품질을 결정**
  1. 자율적인 책임은 협력을 단순하게 만듦
  2. 자율적인 책임은 외부와 내부를 명확하게 분리
  3. 책임이 자율적일 경우 책임을 숭해나는 내부 방법에 변경되더라도 외부 영향 x
  4. 협력의 대상을 다양하게 선택할 수 있는 유연성
  5. 객체의 역할이 이해하기 쉬워짐

# 나의 해석과 회고

자율적인 책임에 대해서 나름 대로 해석을 해보자면 다음과 같다.

#### 자율적인 책임

**고객** -> (아메리카노 주세요) -> **커피 전문점 직원**

#### 자율적이지 못한 제한적인 책임

**고객** -> (따뜻한 아메리카노 주시는데, 원두는 코스타리카 따라주로 2샷 둥글게 둘러서 내려주세요) -> **커피 전문점 직원**

#### 중요한건 **객체지향은 자율적인 객체들의 공동체** 이다. 객체가 자율적이기 위해서는 객체에게 할당되는 책임의 수준도 자율적이어야 한다.

그리고 이러한 책임을 수행하기 위해서 **메시지**를 이용하는데, 이 메시지가 이번 장의 핵심인 듯 하다.

### 메시지

메시지는 요청과 응답 사이에 존재하는 것으로 해당 메시지를 수행하기 위해서 수신 객체는 캡슐화를 통해 내부 행동을 숨기는데, 내부 행동과 외부로 보여질 것을 구분 짓는 것이 바로 인터페이스이다.

인터페이스를 내부의 인터페이스와 외부의 인터페이스로 구분하는 것이 좋다.

또한 메시지는 어떤 객체가 어떻게 메시지를 보내고 어떻게 받을까? 를 생각하기 보다는 **먼저 메시지를 하고자 해서 얻는게 무엇(what)인지**를 생각하고 **어떤 객체가 받을지에 해당하는 어떻게(how)는 나중에 생각해도 좋다**.
