[개발자 책읽기] 객체지향의 사실과 오해-조영호 (2장 이상한 나라의 객체 - 2)

> 해당 글은 조영호님의 **객체지향의 사실과 오해** _역할, 책임, 협력, 관점에서 본 객체지향_ 라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 객체지향의 사실과 오해](http://www.yes24.com/Product/Goods/18249021) 에서 확인해주세요.

#### 객체지향의 사실과 오해 - 역할, 책임, 협력 관점에서 본 객체지향 (조영호)

- 위키북스
- 지은이: 조영호
- 펴낸이: 박찬규, 엮은이: 이대엽, 디자인: 북누리
- 1쇄 발행: 2015.06.17

[##_Image|kage@brjUt4/btq1XL8f5Ec/j4jCTP2njlIi4U5WRS5FF0/img.png|alignCenter|data-origin-width="0" data-origin-height="0" width="334" height="NaN" data-ke-mobilestyle="widthContent"|||_##]

---

### 해당 파트는 글의 양이 길어 2개의 파트로 나눠서 설명하고 있습니다. 자세한 사항은 아래를 참고해주세요

1. [이상한 나라의 객체-1](https://wonit.tistory.com/460) 객체지향과 인지 능력, 상태, 행동, 식별자, 기계로서의 객체
2. [이상한 나라의 객체-2](https://wonit.tistory.com/461) 행동과 상태의 관계, 의인화.

# 이번 장에서 이야기하고자 하는 것

- **행동이 상태를 결정한다**
  - 객체지향을 처음 접하는 사람들이 흔히 하는 실수
    - 상태를 먼저 정하고 행동을 결정
  - 이는 나쁜 영향을 끼침
    - **캡슐화가 저해됨**
      - 상태가 내부로 캡슐화되지 못할 가능성이 큼
      - 공용 인터페이스에 노출될 가능성이 큼
    - **객체를 협력자가 아닌 고립된 섬으로 만듦**
      - 객체를 만드는 큰 이유는 협력을 위함임
      - 상태를 먼저 고려한다면 협력을 먼저 고려하지 않기 때문
    - **재사용성이 저하됨**
      - 앞선 문제와 이어지는 문제로, 협력에 참여하지 못한다는 소리는 재사용성이 떨어진다는 소리와 일맥상통
  - 즉, `상태를 먼저 고려` 한다는 것은 협력을 나중에 고려하겠다는 이야기
  - 우리는 `행동을 먼저 고려` 함으로 협력을 먼저 고려해야 함
    1. 애플리케이션에 필요한 협력을 먼저 생각 -> **행동**
    2. 해당 행동을 위해 필요한 정보를 고려 -> **상태**
- **은유와 객체**
  - 객체지향 설계의 오랜 조언
    - _현실 세계를 모방하라_
    - _객체 지향은 현실 세계의 추상화_
  - 이 말은 틀린 말이다.
    - 앞선 음료수와 사람의 관계를 생각해보면 됨.
    - 만약 음료수가 현실 세계처럼 스스로 행동할 수 없다면?
      - 자율성이 떨어진다.
    - 사람이 음료의 상태를 변경한다면?
      - 사람은 음료의 상태를 계속해서 추적해야 한다.
    - 결국 **객체지향은 현실 세계의 모방**이란 소리는 조금 부족한 소리
  - 우리는 이들을 **의인화 해야함**
- **의인화**
  - 현실 세계의 존재가 소프트웨어의 존재로 들어올 때 수동적인 존재더라도 능동적이게 변함
  - 이를 두고 우리는 의인화라고 함
  - 소프트웨어의 세계에서는 객체가 더 많은 일들을 스스로 할 수 있어야 함
    - 실세계에서는 존재하지도 않는 추상적인 것들 또한 스스로 결정할 수 있는 존재로 탄생
      - 영화 예메, 영화 상영, 강의 수강
  - 즉, 객체지향은 현실 세계를 모방한 것이 아니라 현실 세계를 참조하여 새로운 세상을 탄생시키는 것

# 나의 해석과 회고

객체의 **의인화**는 매우매우매우 중요한 단어인 것 같다.
조영호님의 세미나에서 나온 말을 빌려 설명하자면 이런 것이다.

### 마트에서 우유를 결제한다고 가정해보자.

다음과 같은 순서로 아주 절차지향적으로 플로우가 흐른다.

1. 데이터베이스에서 상품, 고객을 조회
2. 상품의 금액만큼 고객의 지갑에서 금액을 차감
3. 데이터베이스에 저장

```java
public static void main(String[] args) {
  // 데이터베이스 연결
  DBConnection connection = new DBConnection();

  // 상품 금액 확인
  Milk milk = connection.findItem("우유");
  int price = milk.getPrice();

  // 결제
  Person wonik = connection.findPerson("장원익");
  Wallet wallet = wonik.getWallet();
  wallet.setAmount(wallet.getAmount() - price);

  // 상품 지급
  wonik.setItem(milk);

  // 데이터베이스 저장
  connection.save(wonik);
}
```

위의 코드는 절차지향적인 코드이다.

하지만 여기서 의인화를 시켜보자.

- 직원은 Person 객체에 있는 지갑을 꺼내서 돈을 뺴간다.
  - Person은 현실이었다면 경찰을 부르거나 직원을 때린다.
- 그럼 직원 스스로가 지갑을 꺼내서 계산을 하도록 해보자.

```java
public static void main(String[] args) {
  // 데이터베이스 연결
  DBConnection connection = new DBConnection();

  // 상품 금액 확인
  Milk milk = connection.findItem("우유");
  int price = milk.getPrice();

  // 결제
  Person wonik = connection.findPerson("장원익");
  wonik.paymentFor(price);

  // 상품 지급
  wonik.setItem(milk);

  // 데이터베이스 저장
  connection.save(wonik);
}
```

이러면 좀 더 자연스럽다.
왜? 지갑을 고객이 직접 꺼내니까.
근데, 완벽하지 않다.

객체지향을 위해서는 의인화를 하라고 했는데, 여기에는 의인화가 빠져있다.

만약 의인화를 하게된다면 `Milk` 또한 스스로 자율적인 객체가 되어야 한다.

그럼 의인화를 추가시켜 코드를 추가해보자.

```java
public static void main(String[] args) {
  // 데이터베이스 연결
  DBConnection connection = new DBConnection();

  // 상품 금액 확인
  Milk milk = connection.findItem("우유");

  // 결제
  Person wonik = connection.findPerson("장원익");

  // 상품 지급
  milk.sellTo(wonik);

  // 데이터베이스 저장
  connection.save(wonik);
}
```

우리는 `sellTo()`에 어떤 일이 일어났는지 모른다.

하지만 이렇게 의인화를 시켜 milk를 더 자율적이게 만들 수 있다.
