# 도메인이란

- 도메인이란 소프트웨어로 문제를 해결하고자 하는 해결의 영역을 의미한다
  - 각각의 도메인은 하위 도메인을 가질 수 있고, 갖지 않을 수 있다.
  - 모든 영역을 도메인으로 해결하지 않아도 된다.
    - 엑셀 시트로 추적/관리하는것이 편하다면 그렇게 해도 되는 영역이 있듯이

# 도메인 전문가

- 특정 도메인에 대해서 잘 알고 있는 사람을 도메인 전문가라고 한다.
  - PO, PM
- 요구사항은 첫 단추와 같다.
  - 단추는 잘못 끼우면 아래 단추가 엉망이 되듯
  - 하지만 단추는 다시 풀어서 끼우면 되지만 소프트웨어는 그게 힘들기 때문에 첫 단추보다 중요하다
- 도메인 전문가의 요구사항을 잘 분석해서 도메인을 이끌어내야 한다
  - 가능하면 도메인 전문가와 직접 대화를 통해서 문제를 분석하자
  - 커뮤니케이션에 비용을 들이는게 어쩌면 나중으로 갈수록 나을 수 있다
- garbage in, garbage out
  - 도메인 전문가라고 해서 항상 올바른 요구사항을 주는 것은 아니다.
  - 도메인 전문가가 소프트웨어 전문가가 아닐 수 있기 때문에 기존에 만들어진 소프트웨어를 기준으로 요구사항을 맞출 때가 있다.
    - 우리는 진짜로 도메인 전문가가 원하는 것이 무엇인지 알아야 한다. 본질을 생각하자
- 도메인 모델은 특정 도메인을 개념적으로 표현한 것이다
  - 개념 모델과 구현 모델이 있다.
    - 개념 모델 : 도메인 자체를 이해하기 위한 모델
    - 구현 모델 : 도메인을 구현하기 위한 구현 기술에 맞는 모델
  - 두 모델이 중요한 것은 아니고, 도메인 자체를 이해하는데 도움이 된다면 표현 방식은 중요하지 않다

# 도메인 모델 패턴

- 마틴 파울러가 쓴 (_앤터프라이즈 애플리케이션 아키텍처 패턴_) 책의 도메인 모델 패턴이라는 것이 있다.
  - 아키텍처 상의 도메인 계층을 객체 지향 기법으로 구현하는 패턴
  - 표현 -> 응용 -> 도메인 -> 인프라스트럭처
    - 표현 : 사용자의 요청을 처리하고 응답함. UI
    - 응용 : 사용자가 요청한 기능을 수행함. 비즈니스 로직이 없어야 함. 도메인 계층을 조합하고 실행함
    - 도메인 : 시스템이 제공할 도메인 규칙, 비즈니스 로직을 구현함
    - 인프라스트럭처 : 데이터베이스나 메시징 시스템과 같은 외부 시스템과 연동함

# 엔티티와 밸류

- 도출된 도메인 모델은 크게 두 가지(entity, value) 로 나눌 수 있다.
  - 엔티티 : 식별자를 갖고 엔티티 마다 고유하다. `equals()`, `hashcode()` 를 식별자가 같은지 파악해 동일성 (identity) 를 검사할 수 있게 한다.
    - ID 생성 기법은 여러가지가 있다. (UUID, Nano ID, Snowflake, Seq)
  - 밸류 : 식별자를 갖지 않고 개념적으로 완전한 하나를 표현할 때 사용한다 `equals()`, `hashcode()` 를 값을 비교하여 같은지 파악해 동등성 (equality)를 검사할 수 있게 한다.
    - 밸류 타입은 보통 불변하게 작성한다
      - 참조 투명성 : 밸류를 사용하는 쪽에서 밸류가 변경될 여지가 있다면 믿고 사용하질 못한다.
      - 스레드세이프하다
    - 엔티티의 식별자를 밸류 타입으로 만들어서 특별한 의미를 지니도록 하는 경우가 많다

# 도메인 용어와 유비쿼터스 언어

- 도메인 용어
  - 도메인에서 사용하는 언어
    - 도메인에서 사용하는 용어를 코드에 반영하지 않으면 개발자에게 해당 코드를 해석해야 하는 짐을 주는 것이다
- 유비쿼터스 용어
  - 개발자, 기획자, 디자이너, 관계자가 도메인과 관련도니 공통의 언어를 만들고 이를 대화,ㅡ 문서, 도메인 모델 등 모든 곳에서 같이 사용하는 용어
  - 불필요한 해석 과정을 줄일 수 있다
