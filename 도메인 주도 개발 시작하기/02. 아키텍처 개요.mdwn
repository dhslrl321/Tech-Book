# 네 개의 영역

- 아키텍처를 설계할 때 기본이 되는 전형적인 네 개의 영역
  1. **표현** : 웹에서는 HTTP 요청을 응용 영역이 필요로 하는 형태로 변환하고 전달하는 영역
  2. **응용** : 사용자에게 제공해야 할 기능을 구현하는 영역
  3. **도메인** : 도메인 모델을 구현하는 영역
  4. **인프라스트럭처** : RDBMS 나 SMTP 와 같은 특정 구현 기술에 대한 영역
- 계층 구조 아키텍처라고 함

# DIP

- 도메인 영역, 응용 영역은 특정 구현 기술인 인프라스트럭처에 의존하면 안됨
  - 2가지의 어려움이 존재
    1. 테스트 어려움
    2. 기능 확장의 어려움
- 고수준 모듈이 저수준 모듈에 의존하지 않고 저수준 모듈이 고수준 모듈을 의존하게 하는 DIP 를 하면 됨
  - 고수준 모듈 : 의미있는 단일 기능을 제공하는 모듈
  - 저수준 모듈 : 기능을 위해 구성될 수 있는 단일 행동하는 모듈
- 추상화된 인터페이스를 사용하면 DIP 를 구현할 수 있음

# DIP 주의 사항

- 인프라에서 DIP 를 하는 것은 의미가 없음
- 도메인에서 DIP 를, 추상화된 인터페이스를 도메인에서 가져가야 할 필요가 있음

# 도메인 영역의 주요 구성요소

- 엔티티
  - 고유 식별자를 갖는 객체
- 밸류
  - 개념적으로 하나인 값을 표현할 떄 사용
- 애그리거트
  - 엔티티 + 밸류
- 레포지토리
  - 영속성 구현
- 도메인 서비스
  - 특정 도메인에 속하지 않는 도메인 로직 제공

# 앤티티와 밸류

- 엔티티는 DB 테이블이 아님

# 계층 구조 아키텍처

# DIP

- 고수준 모듈과 저수준 모듈
  - 고수준 모듈 : 의미있는 단일 기능을 제공하는 모듈
  - 저수준 모듈 : 단일 행동을 하는 모듈
  - 예를 들면
    - 가격 할인 계산 이라는 고수준 모듈이 있다면 가격을 계산하는 저수준 모듈과 할인률을 구하는 저수준 모듈 2개로 구성되어있다
- DIP 는 저수준 모듈이 고수준 모듈에 의존하도록 한다
