# 명령어

- 명령어의 구조 : 명령부(연산 부호) + 주소부(피연산자)
  - 연산 부호 : 산술 연산, 논리 연산, 보수, 시프트
  - 피연산자 : 연산할 데이터의 정보 저장
    - 피연산자에 존재하는 데이터는 실질적인 데이터보다 데이터가 위치한 주소를 주로 기억하는 경우가 많음
    - 피연산자의 수에 따라서 명령어를 구분하기도 함
      - 0-주소 명령어
      - 1-주소 명령어
      - 2-주소 명령어
      - 3-주소 명령어
    - 모드 비트(1bit) 를 추가해서 직접 주소인지 간접 주소인지 나타내기도 함
      - 직접 주소 : 데이터가 있는 레지스터나 메모리의 주소를 지정
      - 간접 주소 : 데이터가 있는 레지스터나 메모리의 주소 정보를 지정
- 명령어 실행
  - 실행 과정
    1. 명령어 인출
    2. 명령어 해석, 프로그램 카운터 변경
    3. 피연산자 인출
    4. 명령어 실행
    5. 결과 저장
  - 명령어를 **인출하고 실행하는 과정**을 인출-실행 사이클이라고 함
  - 인출 사이클
    - 명령어 실행 사이클의 첫 단계
      1. PC에 저장된 주소를 MAR에 전달
      2. MAR에 저장된 주소를 MBR로 저장
      3. PC를 1 증가시켜 다음 명령어를 인출
      4. MBR에 저장된 내용을 IR로 전달
  - 실행 사이클
    - 인출한 명령어를 해독하고 그 결과에 따른 제어 신호 발생시켜 명령어를 실행
    - 이 단계에서 소요되는 시간을 실행 시간이라고 함
  - 간접 사이클
    - 간접 주소 저장 방식에서 실행 사이클 전에 수행하는 사이클
    - 실제 데이터가 저장된 주기억장치의 유효 주소를 더 읽어오는 방법
      1. IR에 저장된 명령어의 피연산자(주소부)를 MAR에 전달
      2. MAR에 저장된 주소에 해당하는 메모리 위치에서 데이터를 인출하고 MBR에 저장
      3. MBR에 저장된 내용을 IR에 전달
  - 인터럽트 사이클
    - 프로세서가 프로그램을 수행하는 동안 시스템 내부, 외부에서 발생하는 인터럽트를 핸들링
    - 프로세서는 모든 실행 사이클을 완수한 뒤 인터럽트가 있는지 검사하여, 있다면 현재 수행중인 주소(PC 값)을 스택이나 메모리 0번지에 저장
    - 인터럽트를 발생시킨 루틴을 실행하고 처리가 완료되면 중단된 프로그램으로 복귀하여 계속 진행
      1. PC의 내용을 MBR에 저장
      2. 인터럽트 루틴 주소를 PC에 저장
      3. PC에 저장된 인터럽트 루틴 주소를 MAR 에 저장
      4. MR의 주소에 있는 내용을 지시된 셀로 이동
