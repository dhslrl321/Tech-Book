# Scheduling, 스케줄링

- 스케줄링 : 다중 프로그래밍 환경에서 자원(프로세서)를 어떤 프로세스에게 할당할지 결정하는 방법
  - 시스템에 성능 영향을 미침
  - 프로세스 응답 시간을 최소화
- 대부분의 프로세스는 2가지로 나뉨
  - 스케줄링이 필요한 프로세스 : 사용자 프로세스, 시스템 프로세스
  - 스케줄링이 필요 없는 프로세스 : 인터럽트 처리, 오류 처리
- 스케줄링의 목적
  1. 자원 할당의 공정성 보장
  2. 오버헤드 최소화
  3. 실행 대기 방지
  4. 자원 사용의 균형 유지
  5. 서비스 수 감소 방지 (서비스 수가 급격하게 감소되면 안됨, Thrashing - 메모리의 빈 프레임이 줄어들고 페이지 교체 빈도가 증가))

# 스케줄링의 기준 요소

- 프로세스가 실행되면 **프로세스 버스트**와 **입출력 버스트**가 순환 실행됨
  - 프로세스 버스트 : 프로세스가 실행되는 상황
  - 입출력 버스트 : 프로세스 버스트를 위해 입출력을 대기하는 상황

# 스케줄링의 단계

- 크게 3단계로 구분할 수 있음
  1. 작업 스케줄링 (장기)
  2. 작업 승인과 결정 스케줄링 (중기)
  3. 프로세서 할당 스케줄링 (단기)
- 3단계가 sjf, hrn 등등 다양한 스케줄링 알고리즘이 사용됨
- 장기, 중기, 단기로 구분할 수 있음 (아래의 스케줄러 종류에서 나옴)

# 스케줄링의 큐

- 스케줄링을 위해서는 다양한 큐를 사용
- Linked List 형태로 저장되고 PCB 를 연결 리스트로 연결함
- Job Queue, Ready Queue, Device Queue
  - Job Queue : 프로세스가 시스템에 들어올 때 job queue 에 eunqueue
  - Ready Queue : 프로세스의 status 가 ready 인 프로세스들이 위치하고 메모리에 존재함. 프로세서 할당을 기다리는 애들
  - Device Queue : 입출력 장치의 점유를 대기하는 프로세스 리스트

# 스케줄러 종류

- 장기 스케줄러
  - 어떤 프로세스를 Ready Queue 에 삽입할 것인가?
  - 정확히 말하면 디스크에서 메모리로 작업을 가져와 처리할 순서를 결정
  - 실행 빈도가 낮고 다소 느리다
  - 시분할 시스템에서는 장기 스케줄러가 없을 수도 있다, 대신 중기 스케줄러를 이용하기도 한다
- 중기 스케줄러
  - 메모리에 적재된 프로세스 수 관리
  - 프로세스가 여러 개의 CPU 내에 어떤 CPU 를 할당 받을 것인가
- 단기(Short-Term) 스케줄러
  - 어떤 프로세스에게 CPU를 할당할 것인가?
  - 정확히 말하면 메모리에 적재된 프로세스 중 프로세서를 할당하여 실행 상태가 되도록 결정하는 스케줄링
  - 실행 빈도가 높다
  - 디스패처가 포함될 수 있다.
    - 디스패처는 실질적으로 프로세서를 프로세서에게 할당하는 역할
