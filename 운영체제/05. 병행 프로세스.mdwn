# 병행 프로세스

- 한 프로세서는 하나의 프로세스만 실행시킬 수 있는데, 실행 시간을 나눠 마치 여러 프로세스를 동시해 실행하는 것처럼 보이게 하는것
- 구분
  - **독립 프로세스** : 단일 처리 시스템에서 서로 독립적으로 작업을 수행
    - 단일 프로그래밍 : 프로세서를 사용 중이던 프로세스를 완료한 후 다른 프로세스 실행
    - 다중 프로그래밍 : 프로세서 하나를 여러 프로세스가 공유
    - 다중 처리 : 프로세서 2개 이상을 사용하서 프로그램 여러 개를 병렬로 실행
  - **협력 프로세스** : 다른 프로세스와 협력하여 특정 기능을 비동기적으로 수행
    - 경쟁 관계 : 프로세스는 서로를 인지하지 못하는 경쟁 관계를 유지하고 운영체제가 이들을 조율
    - 협력 관계 : 프로세스끼리 통신할 수 있는 함수가 있는데, 이것으로 서로 협력 관계를 맺고 직접 통신
    - 경쟁 관계에 있는 프로세스들은 서로 정보를 교환하지 않지만 프로세스 수행에 있어 다른 프로세스에 영향을 줄 수 있으므로 **상호배제**가 필요

# 병행성 vs 병렬성

- 공통점
  - 동일한 시간 동안 여러 프로세스들을 동시에 실행
- 병행(Concurrency)성
  - Logical Level
  - 동시에 실행되는것 **처럼 보이는 것**
- 병렬(Parallelism)성
  - Physical Level
  - 실제로 작업이 **동시에 처리**되는 것

# 병행 프로세스의 해결 과제들

- 병행성은 한 프로세서에서 여러 프로세스를 이용해서 다중 작업을 하는 활동이므로 조금 주의를 해야할 필요가 있음
  - 고려사항
    - 공유 자원을 상호 배터적으로 사용해야함
    - 프로세스가 작업을 할 때에 다른 프로세스가 그것과 관련된 공유자원을 이용할 수 없도록 상호배제를 수행해야 함
    - 병행 프로세스 간에는 협력이나 동기화를 해야하는데, 상호배제도 이에 포함됨
    - 두 프로세스 사이에는 데이터를 교환할 수 있도록 통신이 가능해야함
    - 교착 상태를 해결하고 병렬 처리 능력을 극대화해야함

# 선행 그래프와 병령 프로그램

- 선행 제약
  - 한 프로세스가 수행되기 위한 제약조건
  - P(i), P(j), P(k) 가 있다고 가정해보자
    - P(i) < P(j) 라면 P(j)가 수행하기 위해서는 P(i) 를 수행해야 한다
    - P(i) < P(j) 이고 P(j) < P(k) 라면 P(j) < P(k) 이다
- 선행 그래프
  - 선행 제약을 논리적인 그래프로 표현한 것
  - 선행 그래프는 **비순환이어야만 한다**

# fork 와 join 구조

- 선형 그래프로 선형 연산을 정의할 때 사용하는 구조
  - 콘웨이, 데니스, 혼 이 최초로 언어적으로 표현함
- fork 와 join 이 없으면 프로그램을 선형 그래프로 옮기기 힘듦
- fork 와 join 을 모두 이용해서 병행을 언어적으로 표현함
- fork
  - 프로세스 1개를 2개의 병행 프로세스로 만듦
- join
  - 병행 프로세스 2개를 1개로 프로세스로 결합하는 방법
  - 여러 개의 병행 프로세스를 하나로 합치기 위해서는 join 에 참여하는 연산의 수를 알아야 함
    - 연산 수를 count 라는 매개변수로 많이 사용함
      - 예를 들어 프로세스 2개가 있고 이들을 join 한다?
        1. join 할 프로세스 개수 만큼 count 변수 초기화
