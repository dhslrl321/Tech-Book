# 데커 알고리즘

- 두 프로세스가 서로 통신하려고 공유 메모리를 사용할 때 공유 메모리를 충돌 없이 공유하기 위한 첫 번째 해결책
- 두 프로세스가 동시에 임계 영역에 진입하려고 시도하면 **순서**에 따라 오직 하나의 임계 영역에 들어갈 수 있도록 함
  1. 각 프로세스는 플래그를 이용함
  2. 만약 내가 들어가고 싶다면 플래스를 설정하고 내 차례를 기다림
  3. 만약 다른 프로세스가 이미 임계 영역에 위치해 있다?
  4. while 문에서 계속해서 순환
- 특징
  - 특별한 하드웨어 명령문이 필요없음
    - 이와 반대로 하드웨어 명령이 필요한 것은 TAS, Test And Set 임
  - 임계 영역 밖에서 수행 중인 프로세스가 다른 프로세스들이 임계 영역에 접근하는 것을 막지 않음
  - 임계 영역에 들어가기를 원하는 프로세스를 무한정 기다리게 하지 않음
  - 공유 자원에 들어갈 수 있는지를 매번 확인하므로 **바쁜 대기**가 발생한다.
  - 2개의 프로세스가 동시에 임계영역에 진입하는 flag 를 설정하면 교착상태가 발생함

```c
while(1) {
  flag[A] = true; // A가 임계영역으로 들어가기 위해 시도

  while(flag[B]) { // B가 임계영역에 있다면 while 로 대기
    if(turn == B) { // 만약 B의 차례라면
      flag[A] = false; // A를 잠시 대기
      while(turn == B); // B 의 turn 아닐 때 까지 반복으로 대기
      flag[A] = true; // 다시 A를 임계영역으로 들이기 위해
    }
  }// while 을 종료하고 이제 A가 작업 수행

  //// 임계 영역 ////
  V++;
  //// //// //// ////

  flag[A] = false; // 임계 영역 사용 완료 지정
  turn = B; // A의 작업 끝
}
```

# TAS, Test And Set 명령어

- 공유 변수를 수정하는 동안 인터럽트 발생을 억제해서 임계 영역 문제 해결
- 항상 적용할 수 있는 방법은 아니고 효율이 떨어짐
- 소프트웨어적인 해결책은 더 복잡하고 프로세스가 2개 이상이라면 더 많이 대기할 수도 있음
- 메모리 값을 수정할 수 있는 하드웨어 명령어로 수행

# 세마포

- 멀티 프로그래밍 환경에서 공유 자원에 대한 접근을 제한하는 방법
- 위의 2개는 복잡한 문제에서 해결하기 어렵고 비효율적임
  - 프로세스가 만약 임계 영역에 들어가기 위해서 대기할 때 while true 를 통한 바쁜 대기를 수행하므로 성능 낭비가 있음
- 세마포어의 연산
  - `S` : 세마포어 변수, 자원의 개수
  - `P(S)` : 임계구역에 들어가기 전 수행 (S--)로 사용 가능 여부 -1
    - 자원 할당
  - `V(S)` : 임계구역에 나올 때 수행 (S++)로 사용 가능 자원 +1
    - 자원 반납
- 세마포 종류
  - 이진 세마포
    - 0과 1로 P와 V 연산을 수행
  - 계수 세마포
    - 가능한 자원의 수로 초기값을 정하고 P와 V 연산을 수행

```sql
procedure P(S)
  while S=0 do wait --바쁜 대기
  S := S - 1
end P

--- 임계 구역 ---

procedure V(S)
  S := S + 1
end V
```

- 한 프로세스가 P 혹은 V를 수행하고 있는 동안 프로세스가 인터럽트 당하지 않게 됨
- 세마포어 구현 방법
  - Busy Waiting, 바쁜 대기를 이용한 방법 (while 조건)
  - Wait Queue, 재움 큐를 이용하는 방법

# 모니터

- 세마포어는 오래된 알고리즘으로 현대에는 모니터를 주로 사용함
  - Java 에서 스레드 동기화시킬 때 `syncronized` 키워드를 통해 모니터 이용
- 모니터 : 프로세스를 동기화 하는 방법 중 하나
  - 한 번에 하나의 프로세스만 모니터에서 활동하도록 보장해줌
  - 프로세스가 공유자원을 이용하려면 무조건 모니터로 들어가야함
    - 이 과정에서 상호배제가 가능해짐
- 동작
  1. 어떤 공유 데이터에 대해 모니터를 지정
  2. 프로세스는 해당 데이터를 접근하기 위해 모니터로 들어가야함
  3. 만약 다른 프로세스가 모니터에 있다면 입장 큐(Mutual Exclusion Queue)에서 대기
