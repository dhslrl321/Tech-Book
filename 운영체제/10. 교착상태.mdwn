# 프로세스가 자원을 요청하는 순서

- 프로세스가 결코 잃어나지 않을 event 를 기다리는 상태가 될 떄
  - 결국 특정 프로세스를 삭제하거나 작업을 교체하는 외부 인터럽트로 해결해야 함
- 다른 표현으로는 시스템 자원에 대한 요구가 뒤엉킨 상태
  ㅂ

1. 자원 요청 : 다른 프로세스가 자원을 사용중이라면 해당 자원이 해제될 때 까지 대기
2. 자원 사용
3. 자원 해제

# 교착 상태

- Deadlock
- 둘 이상의 프로세스가 다른 프로세스가 점유하고 있는 자원을 서로 기다릴 때 발생
- 교착상태가 발생하면 운영체제 스스로가 해결할 수는 없고 사용자가 강제로 인터럽트를 줘서 해결해야함
- 기아상태보다 더 큰 문제를 일으킴
- 대화식 시스템이 발전하면서 동적 자원을 공유하여 사용률을 높이는 과정에서 발생할 가능성이 있다
  - 병행 처리와 자원 공유에 따른 부작용

# 교착상태의 발생 조건

- 4가지 조건이 있음
  - 1, 2, 3 만 만족해도 교착상태가 발생
  - 4는 1, 2, 3 조건을 만족할 때만 발생
- 조건
  1. Mutex, 상호배제 : 자원을 최소 하나 이상 비공유 해야함
  2. Hold-Wait, 점유와 대기 : 자원을 다른 프로세스가 점유하고 있고 다른 프로세스는 해당 자원을 점유하기 위해 대기
  3. Non-Preemtive, 비선점 : 자원을 선점할 수 없음
  4. Circular Wait, 순환 대기 : 대기 집합에서 순환하여 서로의 자원을 대기
- 자원 할당 그래프에 사이클이 존재해야지만 교착상태가 발생

# 교착상태 해결 방법

- 교착상태를 해결하는 방법은 크게 3가지가 존재
  1. 발생하지 않도록 함, 교착상태 예방
  2. 발생 가능성을 인정하지만 적절하게 회피, 교착상태 회피
  3. 교착 상태를 허용하고 탐지하여 다시 회복, 교착상태 회복

# 교착상태의 예방

- 교착상태의 발생 조건을 차단하여 교착상태가 발생하지 않도록 함
  - 단, 상호배제 문제는 전용 자원에서 교착생타가 발생하지 핞기 때문에 제외
- 하벤더가 제안한 방법
  - 자원의 상호배제 조건 방지
  - 점유와 대기 조건 방지
    - 프로세스가 작업을 수행기 전에 필요한 모든 자원을 요청하고 획득해야함
    - 기아상태가 발생할 수 있음
    - 자원 효율성이 매우 떨어짐
  - 비선점 조건 방지
    - 이미 할당된 자원에 선점권이 없어야 함
  - 순환 대기 조건 방지
