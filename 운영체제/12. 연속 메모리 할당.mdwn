# 단편화

- Fragmentation
- 메모리의 빈 공간 또는 데이터가 여러 개의 조각으로 나뉘는 현상
- 메모리의 사용 공간을 줄이거나 읽기, 쓰기 속도를 늦추는 문제 야기
- 단편화 종류
  - Internal Fragmentation, 내부 단편화
    - 이미 정해진 크기에 프로그램을 할당하고 남은 기억 공간으로 사용되지 못하는 공간
    - 프로세스 크기 < 페이지 크기
  - External Fragmentation, 외부 단편화
    - 사용 가능한 분할 공간은 있는데 프로그램의 크기가 커서 사용하지 못하는 기억 공간
    - 남은 공간이 많이 발생해서 효과적으로 사용할 수 없음

# 주기억장치의 관리 레지스터

- 기준 레지스터, Base Register : 메모리에 적재된 프로그램의 시작 위치를 저장, 가장 작은 물리적 주소를 저장 (물리적 주소)
- 경계 레지스터, Boundary Register : 응용 프로그램과 운영체제의 경계를 저장, 프로그램 영역이 저장되어 있는 크기를 저장 (논리적 주소)
- 차폐 레지스터, Fence Register : 프로세스가 할당된 메모리 간의 경계를 저장
- 재배치 레지스터, Relocation Register : 메모리 공간에 위치한 프로세스의 위치를 통제하고 재배치할 수 있는 정보를 저장- 물리 주소는 기준 레지스터 + 경계 레지스터

# 연속 메모리 할당

- 연속 메모리 할당은 단일 프로그래밍 환경과 다중 프로그래밍 환경으로 나눌 수 있다.
  - 단일 프로그래밍 환경
    - 사용ㅇ자가 직접 배치 과정을 수행
    - 주소 잘못 설정하면 운영체제에 데이터를 건들기 때문에 문제가 발생할 수 있음
      - 이 때 경계 레지스터가 등장
      - 경계 레지스터가 사용자 영역과 운영체제 영역 사이에서 둘을 나누는 역할
    - 단일 프로그래밍에서는 연속 메모리 할당이 쉬운데 효율성이 떨어짐
  - 다중 프로그래밍 환경
    - 고정 분할 방법과 가변 분할 방법으로 나뉨
    - 고정 분할 방법 : 메모리를 여러 개의 고정된 크기로 분할하는 방법
    - 가변 분할 방법 : 필요한 만큼만 메모리를 할당

# 연속 메모리 할당 - 고정 분할 방법 (정적 분할)

- 메모리를 여러 개의 고정된 크기로 분할하고 각 메모리는 하나의 프로세스(작업)을 실행 가능
  - 메모리가 고정된 크기로 동일하게 나뉜다는 개념은 아님
  - 메모리의 크기가 고정되면 바뀔 수 없다는 소리
- 내부 단편화와 외부 단편화가 많이 발생할 수 있음

# 연속 메모리 할당 - 가변 분할 방법 (동적 분할)

- 고정 분할이 메모리를 고정하니까 발생하는 내부, 외부 단편화를 해결하기 위해 고정된 경계를 없애고 각 프로세스가 필요한 만큼만 메모리를 할당하는 방법
  - 필요한 만큼만 메모리를 내어주니 내부 단편화가 발생하지 않는데 외부 단편화는 발생할 수 있음
- 기준 레지스터와 경계 레지스터를 사용
- 분할 테이블을 가지고 있어야 함
  - 분할 테이블 : 운영체제가 메모리의 어느 부분을 사용하고 사용할 수 있는지 알 수 있는 테이블
- 메모리 배치에 따라서 성능이 다르게 나올 수 있다.
- 이 배치 전략을 3가지로 나눌 수 있음
  - 최초 적합, First-Fit
    - 프로세스를 사용 가능 공간 중 첫 번째 공간에 할당
    - 빠르게 사용 공간을 찾을 수 있지만 공간 활용률이 떨어짐
  - 최적 적합, Best-Fit
    - 프로세스를 사용 가능 공간 중 가장 작은 공간에 할당
    - 사용 가능 공간을 계속해서 정렬해야 하기 때문에 비효율적일 수 있음
  - 최악 적합, Worst-Fit
    - 프로세스를 가장 큰 사용 공간에 할당
    - 가장 큰 공간에 할당하면 자투리 공간이 커지기 때문에 또 다른 프로세스가 들어갈 확률이 높기 때문에
    - 또한 공간을 계속해서 정렬해야하지만 최적 적합보다 유용함
- 위 배치 전략은 메모리 효율에 크게 차이가 있지는 않다고 함
