# 세그멘테이션

- 페이징
  - 물리적 주소를 크기가 고정된 페이지로 분할하기 때문에 사용자 프로그램과 프로세스의 관점에서 메모리가 일치하지 않음
- 프로세스를 서로 다른 크기의 세그먼트의 집합으로 만들고 세그먼트 테이블을 이용해서 접근
  - code, data, stack, heap 으로 영역을 나누는 것도 크게 보았을 때 세그먼트로 봄

# 세그먼트 테이블

- 구성요소
  - 세그먼트 번호, 시작 주소(base), 세그먼트 크기(limit)
  - 세그먼트의 크기를 넘어서는 주소가 들어오면 인터럽트가 발생해서 해당 프로세스를 강제 종료

# 세그먼트와 페이징

- 세그멘테이션은 보호와 공유에서는 더 나은 성능을 발휘하나 현재는 대부분 페이징 기법을 사용
  - 다중 프로그래밍에서는 크기가 서로 다른 프로세스로 인해서 여러 크기의 hole 이 발생
  - 세그먼트도 똑같은 문제가 발생함
- 결론은 보호와 공유는 세그먼테이션가 효율적이고 성능은 페이징이 더 좋아서 Paged Segmentation 을 탄생시킴

# Paged Segmentation

-
