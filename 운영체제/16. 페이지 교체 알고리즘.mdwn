# 참조 문자열

- 메모리를 참조하는 페이지를 문자열로 만든 것

# 페이지 교체 알고리즘

- 가상 메모리의 요구 페이징 시에 페이지 부재가 발생할 때 적절한 페이지 교체 알고리즘이 있어야함
- 교체할 희생 페이지를 찾는 방식에 따라 다양하게 구분됨
  - FIFO
  - OPT
  - LRU
    - 카운터
    - 스택
  - LRU-without-hardware
    - 참조 비트
    - 시계 (2차적 기회 대치)
  - NUR
    - LFU
    - MFU

# 선입선출 대치 알고리즘, FIFO

- FIFO 알고리즘이라고도 함
  - Queue 자료구조를 이용함
  - 모든 페이지는 FIFO Queue 를 이용함
- 페이지를 큐 구조로 유지하면서 가장 오래된 페이지를 먼저 교체
- 구현하기 쉽고 이해하기가 쉬우나 성능이 항상 좋은 것은 아님
- 벨래디의 변이 (Belady's anomaly)
  - 특정 페이지 교체 알고리즘에 할당되는 프레임 수가 증가할 때 페이지 fault 도 함께 증가하는 현상

# 최적 페이지 대치 알고리즘, OPT, Optimal replacement algorittm

- 벨래디의 변이로 인해서 벨래디가 만든 알고리즘
- 앞으로 가장 오랫동안 사용하지 않을 페이지를 대치
- 현실적으로 구현하기 어려움
  - 특정 페이지를 정확히 언제 사용할 것인지 정보를 요구하는데, 이는 알기 어렵기 때문임

# 최근 최소 사용 대치 알고리즘, Least Recently Used

- OPT 알고리즘에서 특정 페이지를 언제 사용할 것인지를 예측하는 가장 가까운 방법
- 과거 오랫동안 사용하지 않은 페이지를 대체하는 알고리즘
  - 과거의 데이터를 이용해서 미래를 예측하려는 통계적인 개념
- 메모리의 지역성(Locality) 를 이용한 알고리즘으로 각 페이지에 마지막으로 사용한 시간을 연관시킴
  - 짧은 시간 동안 많이 사용한 페이지를 나중에도 짧은 기간 동안 가장 많이 사용할 것이라는 아이디어
- 우수한 페이지 교체 알고리즘으로 평가되는데 이 알고리즘을 구현하기 위해서는 하드웨어 (레지스터)를 이용해야 함
  - 하드웨어라면 Counter 나 Stack 의 두가지 방법이 존재
  - Counter 를 이용한 방법
    - 각 페이지 테이블 항목에 사용 시간 레지스터를 둠
    - 페이지 참조가 있을 때마다 모든 참조의 프로세서 클록을 각 테이블 항목에 업데이트
      - 페이지를 참조할 때 마다 클록이 증가
      - 클록이 가장 작은 값을 교체
    - 페이지 탐색 시간과 테이블을 업데이트 해야하는 비용이 발생함
  - Stack 을 이용한방법
    - 페이지 번호를 스택에 넣어 관리하고 페이지를 참조할 때 마다 페이지 번호를 스택의 top 에 위치시킴
      - top 에 있는 페이지는 가장 최근에 사용한 페이지
      - bottom 에 있는 페이지는 가장 늦게 사용한 페이지로 page fault 가 발생하면 이를 교체
    - 스택의 중간에서 데이터를 가져오므로 이중 링크의 조작이 필요하여 오버헤드 증가

# 최근 최소 사용 대치 근접 알고리즘

- LRU는 하드웨어 자원(register, stack) 이 들어가므로 비용이 비쌈
- 역시나 참조비트를 이용
- 2가지 구현 방법 (참조비트, 시계)
  - 참조 비트 알고리즘
    - 각 페이지에 8비트 정보에 일정한 간격으로 참조 비트를 기록
    - 시프트 연산을 통해서 왼쪽에서부터 참조할 때 마다 1씩 shift
    - 희생자 후보가 2개 있을 때는 FIFO 로 제거하거나 후보 모두를 제거
  - 시계 (2차적 기회 대치 알고리즘)
    - 원형 버퍼를 이용해서 참조비트가 1이면 0으로 대치 (기회 한 번)
    - 참조비트가 0이면 그제서야 제거
    - 희생자 후보가 2개 이상 있을 때는 FIFO 로 제거

# 최근 미사용 대치 알고리즘, NUR, Not Used Recently

- 최근에 사용하지 않는 페이지들은 가까운 미래에도 사용하지 않을 가능성이 높다는 아이디어
- 최근 사용 여부를 판단하기 위해 2개의 비트를 이용 (참조 비트, 수정 비트)
  - 참조비트 : 1, 0
  - 수정비트 : 1, 0
