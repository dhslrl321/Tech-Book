# 가상 메모리 개념과 원리

- 개념
  - Virtual Memory
  - 각 프로세스마다 실제 물리 메모라가 아닌 가상의 주소 공간을 보이게 하는 것
    - MMU라는 하드웨어가 논리 주소를 물리 주소로 바꾸는 과정을 가상 메모리라고 할 수 있음
    - 가상 메모리의 성능은 MMU 가 논리 주소를 물리 주소로 얼마나 빠르게 바꾸느냐에 따라 있음
  - 이 과정에서 Swap 이 사용될 수 있음
    - 1차 기억장치와 2차 기억장치라고 나뉠 수 있다.
      - 1차 기억장치 : 메인 메모리로 실행 중 참조하는 데이터
      - 2차 기억장치 : 메인 메모리에 들어갈 수 없는 데이터를 저장, 단 2차 기억장치의 프로세스를 실행하려면 1차 기억장치로 불러와야 함 (적재)
- 가상 메모리 전략이 성공적인 이유
  - 모든 프로그램은 항상 동시에 사용되지 않는다
  - 예외를 처리하는 오류 처리 코드는 자주 필요하지 않으며 아예 발생하지 않을 수도 있다.
- 몇가지 문제점
  - 메모리와 디스크 사이에 이동량이 증가하여 스와핑 공간이 필요하다.
  - 페이지 적재와 복귀를 할 페이징 알고리즘을 결정해야 한다.

# 요구 페이징

- 프로세스를 페이지로 나누고 필요한 만큼만 메인 메모리에 적재하는 방법
- 가장 메모리에서 많이 사용되는 메모리 관리 방법
- 원리
  - PMT 에 각 페이지의 유효(적재되었는지 아닌지)를 확인하는 valid bit 를 추가
    - valid (1) : 메인 메모리에 페이지가 존재한다.
    - invalid (0) : 디스크에 페이지가 존재한다. 즉 페이지를 메인 메모리로 fetch 해야 한다
  - 만약 valid bit가 0인 비타당 페이지를 요구할 때는 **페이지 부재**(page fault)가 발생함

## 페이지 부재

- 프로세스가 비타당 비트로 표시된 페이지에 접근할 때 일어나는 과정
  1. 페이지 부재(Page fault)로 Trap 이 발생 (트랩은 인터럽트와 비슷하지만 외부 비동기적 의미인 인터럽트와 반대로 스스로가 거는 인터럽트쯤)
  2. 제어권을 운영체제로 넘긴다.
  3. 운영체제는 페이지를 가져오기 위해서 빈 프레임 중 하나를 선택함
  4. 페이지를 디스크에서 메모리로 가져옴 이때 다른 프로세스가 프로세서를 점유
  5. 페이지 테이블의 비타당 비트를 타당으로 변경하고 트랩으로 인터럽트된 명령어들을 다시 실행
- Page fault 의 적절한 대처가 있기 때문에 프로세스의 한 부분을 아직 적재하지 않았더라도 프로세스를 수행할 수 있음
- 장점과 단점
  - 장점
    1. 다중 프로그래밍의 정도를 증가시키고 액세스하지 않은 페이지를 적재하지 않아서 메모리 절약이 가능함
  - 단점
    1. 페이지 교체 알고리즘이 필요하기 때문에 관리가 복잡해짐
    2. 메인 메모리와 디스크 간의 과도한 페이지 교체로 오버헤드를 증가시킴
