# 객체, 설계

- **로버트 마틴이 말 하는 소프트웨어 모듈의 세 가지 목적**
  1. 실행 중에 제대로 동작해야 한다.
  2. 변경을 위해 존재하는 것이다. 간단한 작업만으로도 변경이 가능해야 한다.
  3. 코드를 읽는 사람과 의사소통하는 것. 모듈은 특별한 훈련 없이도 개발자가 쉽게 읽어야 한다.
- **처음 작성된 잘못된 코드에서**
  - 예상을 빗나가는 코드
    - 각자 객체를 의인화 했을 때, 스스로의 자율성이 없음
  - 이해 가능하지 못한 코드
    - 해당 코드를 이해하기 위해서는 각각의 객체 내부를 알아야 함
  - 변경에 취약한 코드
    - A가 B에 의존하고 있다면 B가 바뀐다면 A도 바뀌어야 함
- **이를 고치려면?**
  - 자율성을 높혀라
    - 각자가 변경되더라도 각자가 책임질 수 있게 스스로에 대한 자율성을 높혀라
      - 결합도를 낮추고 응집도를 높혀라
      - 개념적이나 물리적으로 내부 세부적인사항을 가리는 캡슐화를 해라
    - 구현을 노출하지 말고 해당 구현에 대한 인터페이스만 노출시켜라
- **절차지향과 객체지향**
  - 수정하기 전의 코드 : 절차 지향
    - 하나의 메서드 `enter` 에서 해당 메서드가 수행하는데 필요한 모든 절차, 프로세스를 순차대로 호출
    - 변경하기 어렵다.
    - 코드를 읽는 사람과 의사소통이 어렵다.
  - 수정 후의 코드 : 객체 지향
    - 데이터와 프로세스가 동일한 내부 모듈에 존재
    - 꼭 필요한 의존성은 적절하게 배치
    - 객체 내부의 변경이 객체 외부에 파급되지 않도록 제어
    - 각자가 가져야 할 책임은 각자가 갖는다.
    - 자율성 증가
- **의인화를 해보면서 설계해라**
  - 현실에서는 수동적인 존재라고 하더라도 객체지향 세계에서는 모든 것이 능동적으로 변경
- **객체 지향 설계**
  - 우리가 원하는 것 : 변경에 유연하게 대응할 수 있는 코드
  - 우리가 사는 세상 : 개발이 진행되는 동안 끊임없이 변경되는 요구사항
  - 우리의 코드의 이상향 : 읽기 쉬운 코드 == 변경 가능한 코드
  - 훌륭한 객체지향 설계 : 객체 사이의 의존성을 적절히 관리
