[개발자 책읽기] 클린 코드-애자일 소프트웨어 장인 정신 (2장 의미 있는 이름)

> 해당 글은 Robert C.Martin **클린 코드** 라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 클린 코드 - 애자일 소프트웨어 장인 정신](http://www.yes24.com/Product/Goods/11681152) 에서 확인해주세요.

#### **클린 코드** - 애자일 소프트웨어 장인 정신 (Uncle Bob)

- 위키북스
- 지은이: Robert C.Martin (Uncle Bob)
- 옮긴이: 박재호, 이해영

[##_Image|kage@b9ygf9/btrr9gXuJLT/c0H8kDAQIeYzVNO0yolpn1/img.png|CDM|1.3|{"originWidth":1440,"originHeight":1440,"style":"alignCenter","width":468,"height":468}_##]

---

# 이번 장에서 이야기하고자 하는 것

이번 장에서는 **의미 있는 이름**을 잘 짓는 몇가지 규칙을 이야기한다.

#### Naming 은 의미를 해석할 책임이 독자에게 있는 **논문 모델**이 아니라 의도를 밝힐 책임이 있는 **잡지 모델**이 적합하다

## 의도를 분명히 밝혀라

- 우리가 하는 naming 은 다음과 같은 질문에 답할 수 있어야 한다.
  - 변수, 함수, 클래스의 존재 이유는?
  - 사용 방법은?
  - 결국 위의 질문에 적절히 대답하지 못한다면 의도를 분명히 드러내지 못했다는 것이다.

```java
public List<int[]> getThem() {
  List<int[]> list = new ArrayList<>();

  for (int[] x : theList) {
    if (x[0] == 4)
      list.add(x);
  }

  return list;
}
```

- 위의 코드는 **코드 맥락이 코드 자체에 명시적으로 드러나지 않음**

```java
public List<int[]> getFlaggedCells() {
  List<int[]> flaggedCells = new ArrayList<>();
  for (int[] cell : gameBoard) {
    // if 문을 명시적인 함수를 이용해서 개선할 수 있다.
    // --> cell.isFlagged()
    if (cell[STATUS_VALUE] == FLAGGED)
      flaggedCells.add(cell);
  }

  return flaggedCells;
}
```

- 이렇게 각각의 이름의 의도를 명시적으로 드러낸다면 가독성이 더 좋은 코드가 나옴

## 그릇된 정보를 피하라

- 약어는 독자에게 그릇된 정보를 제공할 수 있다.
- Grouping 을 위해 xxxList 라는 이름 또한 그릇된 정보일 수 있다.
  - `AccoutList` (X) -- `Accounts` (O)
  - List 라는 것은 프로그래머에게 특수한 의미를 지니고 있기 때문에 그릇된 정보를 제공하는 셈이다
- 서로 흡사한 이름을 사용하지 않도록 주의한다

## 의미 있게 구분하라

- 이름이 달라진다면 의미도 달라져야 한다
  - `void copyChar(char[] a1, char[] a2)` 보다는 `void copyChar(char[] source, char[] destination)` 이 좋다.
- 불용어를 사용하지 말자
  - `Account` 와 `AccountInfo` 에 차이를 구분할 수 있을까?
  - `Message` 와 `MessageString` 에 차이가 무엇일까?

## 한 개념아 한 단어만 사용하라

- 동일한 개념 (`fetch`, `get`) 이 있을 때 하나만 사용해야 한다.
- 다른 개념에 같은 용어를 사용한다면 말장난이다
- 그렇다고 맥락이 맞지 않음에도 불구하고 `add` 와 `insert` 를 구분짓지 않는 행동은 좋지 않다.
  - 맥락을 잘 이해하고 사용해야 한다

## 이외에도

- **검색하기 쉬운 이름을 선택하라**
- **인코딩을 피하라**
- **자신의 기억력을 자랑하지 마라**
- **기발한 이름은 피하라**
- **해법 영역에서 가져온 이름을 사용하라**
  - 알고리즘, 디자인 패턴등을 차용한 이름을 함께 사용하는 것도 좋은 선택이다.
  - 모든 이름을 도메인에서 가져오려하지 않아도 된다.

# 나의 해석과 회고

내가 속한 조직의 CTO 님은 **코딩은 글쓰기와 같다** 라는 말을 자주 하신다.

코딩은 글쓰기와 비슷하기에 많이 써보고 읽어봐야 실력이 는다고 한다.

이를 실천하기 위하 가장 먼저 필요한 개념이 바로 **의미 있는 이름 짓기**라고 생각한다.

이러한 의미 있는 이름 짓기가 가능하기 위해서는 **단지 기술 능력, 비즈니스 이해도**만 높아서 되는 것이 아니라 **설명 능력, 문학적 배경**이 함께 되어야 한다.
