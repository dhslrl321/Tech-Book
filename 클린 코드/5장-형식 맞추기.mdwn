[개발자 책읽기] 클린 코드-애자일 소프트웨어 장인 정신 (5장 형식 맞추기)

> 해당 글은 Robert C.Martin **클린 코드** 라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 클린 코드 - 애자일 소프트웨어 장인 정신](http://www.yes24.com/Product/Goods/11681152) 에서 확인해주세요.

#### **클린 코드** - 애자일 소프트웨어 장인 정신 (Uncle Bob)

- 위키북스
- 지은이: Robert C.Martin (Uncle Bob)
- 옮긴이: 박재호, 이해영

[##_Image|kage@b9ygf9/btrr9gXuJLT/c0H8kDAQIeYzVNO0yolpn1/img.png|CDM|1.3|{"originWidth":1440,"originHeight":1440,"style":"alignCenter","width":468,"height":468}_##]

---

# 이번 장에서 이야기하고자 하는 것

- 내가 짠 코드를 독자들이 읽었을 때 코드가 깔끔하고, 일관적이며, 꼼꼼하다고 감탄하면 좋겠다. 전문가가 짰다는 인상을 심어주면 좋겠다.
- 프로그래머라면 **형식을 깔끔하게 맞춰 코드를 짜야 한다**

## 코드의 형식이 중요한 이유

- 우리의 소스코드는 언젠간 변한다. 변하는 상황에 있어

## 정리

- 적절한 행 길이를 유지하라, 세로 형식 맞추기
  - 개념은 빈 행으로 분리하라
    - 행의 묶음은 개념적으로 동일한 부분이라 해석된다
  - 변수는 사용하는 위치에 최대한 가까이 선언하라
    - 하지만 인스턴스 변수는 클래스 맨 처음에 선언하는 것이 일반적이다
  - 종속 함수
    - 한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다
    - 가능하다면 호출하는 함수를 호출되는 함수보다 먼저 작성한다.

```java
public class CleanCode {
  private String bookname; // 인스턴스 변수는 클래스 맨 처음에
  private Integer price;

  /**
  * 개념적 묶음은 행으로 구분
  */
  public void greet() {
    String info = toString(); // 변수 선언은 사용하는 위치에 최대한 가까이
    System.out.println(info);
  }

  private String toString() { // 호출되는 (Callee) 함수는 아래로
    return bookname + " " + price;
  }
}
```

- 가로 형식 맞추기
  - 가로의 길이는?
    - Uncle Bob 기준에서는 100자나 120자를 추천함
    - 왠만하면 IntelliJ 에서 지정한 열의 길이를 넘지 않는 것이 좋을것 같음
  - 가로 공백과 밀집도
    - 가로 공백 : 공백을 통해서 **밀접한 개념**과 **느슨한 개념**을 표현함
    - 밀집도

```java
public void measureLine(String line) {
  int lineSize = line.length(); // 공백을 이용해서 느슨한 개념을 표현
  formatter.format(line, lineSize); // 공백을 없앰으로 밀집된 개념을 표현 (함수와 인수 사이는 밀접하므로)
}
```

- 팀의 규칙
  - 팀의 규칙이 곧 나의 규칙이다.
  - 팀은 한 가지의 규칙에 합의해야지 **일관적인 스타일의 코드**가 생산됨

# 나의 해석과 회고

이번 장에서 말하는 내용은 **일관된 형식을 위한 코드 작성법**이다.
이를 위해서는 **형식**이라는 것이 가장 기본이라 표현하고 있다.

이번 장에서 이야기하는 내용들은 다행히? 내가 어느정도 이해해왔고 실제로 지키려는 규칙들이었던것 같다.

하지만 그럼에도 가장 어려운 부문은 바로 **적절한 행의 길이 유지**이다.

적절한 행의 길이가 유지되기 위해서는 다시 돌아가서 **한 가지만 제대로 한다**라는 규칙으르 잘 지켜야 한다고 생각한다.

아무리 행의 길이를 위의 방법들을 통해서 짧게 유지한다고 해도 한 번에 여러가지를 한다면 긴 길이의 행이 나올수 밖에 없다고 생각했다.

오늘도 다시 한 번 생각해본다

#### **한 번에 한 가지만** 제대로 한다
