[개발자 책읽기] 클린 코드-애자일 소프트웨어 장인 정신 (6장 객체와 자료구조)

> 해당 글은 Robert C.Martin **클린 코드** 라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 클린 코드 - 애자일 소프트웨어 장인 정신](http://www.yes24.com/Product/Goods/11681152) 에서 확인해주세요.

#### **클린 코드** - 애자일 소프트웨어 장인 정신 (Uncle Bob)

- 위키북스
- 지은이: Robert C.Martin (Uncle Bob)
- 옮긴이: 박재호, 이해영

[##_Image|kage@b9ygf9/btrr9gXuJLT/c0H8kDAQIeYzVNO0yolpn1/img.png|CDM|1.3|{"originWidth":1440,"originHeight":1440,"style":"alignCenter","width":468,"height":468}_##]

---

# 이번 장에서 이야기하고자 하는 것

- 자료 추상화
  - private 으로 우리가 놓는 이유는 무엇일까?
    - private 으로 변수 접근을 제한하여 데이터 (변수)에 의존하지 않도록 개발할 수 있도록 한다.
  - 변수를 private 으로 감추어도 조회 함수와 설정 함수 `getter/setter` 를 제공한다는것 만으로도 외부로 노출하는 것과 같다.
  - 당연하게 변수에 접근하는 방법을 오로지 함수라는 계층을 넣는다고 해서 감춰지는 것이 아니다.
  - 추상 인터페이스를 통해서 사용자가 구현을 모른 채 핵심을 조작할 수 있어야 한다.
  - 자료를 세세하게 공개하는 것보다 추상적인 개념으로 표현하는 것이 좋다
  - 중요한 것은 특정 행동을 추가하더라도 기존의

```java
interface Person {
  String getInformation();
}

class Teacher implements Person {

  private String name;
  private int age;

  public String getName() {} // getter => public 과 같다

  public int getAge() {}

  @Override
  public String getInformation() { // => 구현을 모른채 핵심을 조작할 수 있게 한다.
    return name + " " + age; // 데이터에 의존적이지 않게 된다
  }
}
```

## 절차지향과 객체지향

- 절차지향
  - 참조 연잔사를 통해서 어떠한 함수던 추가적으로 구현하더라도 무리가 없다.
  - 즉, 기존의 데이터를 변경하지 않으며 새 함수를 추가하기 쉽다.
  - 또한 새로운 형을 추가하기 어렵다

```java
public class Square {
  public int width;
  public int height;
}
public class Circle {
  public int radius;
  public int circle;
}

public class Main {

  Square s = new Square();

  public int ares(String type) {
    if (type.equals("Square")) {
      return s.width * s.height;
    } else if (type.equals("Circle")) {
      return PI * radius * radius;
    }
    // ...
  }
}
```

- 객체지향
  - Polymorphic 을 통해 새로운 클래스를 추가하는데 제약이 없다.
  - 함수를 추가하고싶다면 Shape 의 구현체 모두에게 함수를 추가해야한다
  - 즉, 기존의 함수를 변경하지 않으면서 새 클래스를 추가하기 쉽다.
  - 또한 새로운 함수를 추가하기 어렵다

```java
public class Shape {
  public int area();
}

public class Square implements Shape {
  @Override
  public int area() {
    return // ..
  }
}

public class Circle implements Shape {
  @Override
  public int area() {
    return // ..
  }
}
```

위의 내용으로 미루어 보았을 때, 모든 코드가 객체지향이라고 해서 좋은 것은 아니다.

절차지향의 코드가 효율적인 곳이 존재한다.

## 디미터 법칙

- 디미터 법칙
  - **객체지향의 기본으로 한 줄에 한 점 찍기**로 유명한 법칙
  - 객체는 스스로가 보유한 정보로만 가지고 의사 결정을 해야한다.
  - 다른 객체를 탐색해 무언가를 알아내서는 안된다.
- 기차 충돌
  - 디미터 법칙을 어긴 대표적인 사례
  - 여러 객체들이 한 줄로 이어진 형태의 방식의 개발을 일컫는다.
    - 하지만 단순 자료 구조 (DTO) 인 경우 디미터 법칙이 적용되지 않는다.
    - 객체의 경우라면 디미터 법칙이 적용된다.

```java
// 기차 충돌 코드지만 단순 자료 구조이기 때문에 디미터 법칙이 적용되지 않음
String title = envelopeNotification.getNotification().getSubject().getValue();

// 기차 충돌 코드이며 객체이기 때문에 디미터 법칙을 벗어남
String title = boardService.findPostingById(1004L).getBody().getTitle();
```

# 나의 해석과 회고

- 자료를 추상화 할때 추상 인터페이스를 통해서 사용자가 구현을 모른 채 핵심을 조작할 수 있어야 한다.
  - ResultTarget 에서 getter 를 인터페이스로 놓는 이유를 이제야 이해함

어떤 프로젝트를 진행할 때, 언뜻 보기에 자료 구조처럼 생긴 객체가 있었다.

해당 객체는 여러 구현체들이 존재하며 구현체들마다 각각 표현하고자 하는 세부 내용이 조금 달랐다.

그 객체에서는 추상 인터페이스를 통해서 Client 는 **구현을 알지 못한 채, 핵심만 조작**하도록 하는 코드가 존재했다.

사실 나는 처음 코드를 보았을 때, 직관적으로 이해가 가지 않았었고 크게 와닿지 않았다.

하지만 이제서야 그것이 어떤 의미인지, Client 는 **구현을 알지 못한 채, 핵심만 조작**하도록 하는 코드가 무엇인지 이해할 수 있게 되었다.

간단히 내용을 설명하자면 다음과 같다.

```java
interface ResultTarget {
  String getId();
}

class KakaoResultTarget implements ResultTarget {
  private String username;
  private LocalDateTime createdAt;

  @Override
  public String getId() {
    return username + createdAt.toString() + Math.random();
  }
}

class NaverResultTarget implements ResultTarget {
  private String nickname;
  private Long userId;

  @Override
  public String getId() {
    return nickname + "&" + userId + Math.random();
  }
}
```

이렇게 클라이언트는 구현을 알지 못한 채, 핵심만 조작하도록 하는 코드가 된다.

즉, 클라이언트는 Kakao 이던 Naver 이던 상관 없이 Id 라는 필드만을 원하는 상황이고 이를 추상화 한 것이 바로 객체가 가져야 할 기본적인 소양이 아닐까 싶다.
