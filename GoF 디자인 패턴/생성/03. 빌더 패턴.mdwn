# 빌더 패턴

- 복잡한 객체를 생성하는 방법과 표현하는 방법을 정의하는 클래스를 별도로 분리
  - 생성자의 인자가 많아지는 것을 복잡한 객체라고 함.
- 서로 다른 표현이라도 이를 생성할 수 있는 동일한 절차 제공
- 객체를 생성하는 방법과 객체를 표현하는 방법을 분리한다.
- 점층적 생성자 패턴과 자바 빈 패턴의 장점을 결합
  - 점층적 생성자 패턴
  - 자바빈 패턴
    - setter 는 어디서도 사용할 수 있기 때문에 의 일관성이 깨지는 단점이 존재
- 객체 생성을 유연하게 제공

# 참여 객체

- Builder : 빌더 인터페이스
- ConcreteBuilder : 빌더 인터페이스 구현체. 합성하는 방식에 따라 여러 구현체를 생성
- Director : Builder 를 사용해 객체를 생성하는 주체
- Product : Director 가 Builder로 만들어내는 결과물

# 사용 방법

- Director 객체를 생성한다.
- Product의 일부가 build 될 때마다 Director는 Builder 에 통보한다.
- Builder는 Director의 요청을 처리해여 Product에 일부를 추가한다

#### builder는 부품을 만들고 director가 builder로 만든 부품을 조합해서 제품을 생산

# 예제

- Builder : `Buildable`
  - 원래 ConcreteBuilder 를 이용해서 Builder를 실제 Product의 스펙에 맞게 구현해야 함
  - 하지만 그냥 Product 내부에서 inner class를 정의해서 Builder를 사용하는 형태로 구현
  - 개인적으로 더 깔끔함
- Product : `Airplane`

# 개인적으로

- 개인적으로 빌더는 자바빈의 setter를 지양한다고 가정했을 때, 점층적 생성자를 더 컴팩트하게 만든 것이라 생각함
  - 매개변수가 들어올 수 있거나 없음을 점층적 생성자를 이용했을 때 모든 생성자를 정의해줘야 함
  - 그 단점 해결
