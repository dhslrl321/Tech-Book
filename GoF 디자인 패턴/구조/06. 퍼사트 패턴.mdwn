# 퍼사드 패턴

> 한 서브시스템 내의 인터페이스 집합에 대한 확일화된 하나의 인터페이스를 제공하는 패턴으로, 서브시스템을 사용하기 쉽도록 상위 수준의 인터페이스를 정의한다.

- 여러 서브 시스템들 간의 의사소통을 개별적으로 하는 것이 아닌 Facade 인터페이스 하나로 관리할 수 있게 함

# 등장 배경

- 복잡한 시스템을 여러 서브 시스템으로 구조화
  - 복잡성이 줄어듦
  - 하지만 서브 시스템들 간의 의사소통 및 종속성이 발생
  - 가장 중요한 것은 **최소 지식 원칙**을 위배하는 경우가 발생
- 이러한 문제를 최소화하기 위해서 등장

# 참여 객체

- Facade
  - 서브 시스템에 대하여 하나의 획일화된 인터페이스를 제공하는 객체
- Sub System
  - 퍼사드에 의해서 관리될 서브 시스템 클래스들
- Client
  - Facade 에 접근하여 서브 클래스를 사용하는 사용자 객체

# 예시

- 비행기 조종 프로그램
- 준비를 위해 작동하는 기계들
  - 랜딩 기어, 날개, 엔진
- Facade
  - `FlightControlSystemFacade`
  - 다음과 같은 과정이 존재
    - 준비 : 랜딩 기어 상태 확인, 엔진 상태 확인, 날개 상태 확인
    - 이륙 : 랜딩 기어 Up, 엔진 출력 up, 날개 Up
    - 상승 : 엔진 출력 up, 날개 Up
    - 하강 : 엔진 출력 down, 날개 down
    - 착륙 : 랜딩 기어 Down, 엔진 출력 down, 날개 down
- Sub System
  - `LandingGear`
  - `Wing`
  - `AeroEngine`

# 장점과 단점

### 장점

- 최소 지식 원칙을 만족시킬 수 있다.
- 서브시스템 내부를 보호할 수 있다.
- 결합도를 낮출 수 있다.
- 이식성이 높아진다.

### 단점

- 완벽한 decoupling 은 불가능하다.

# 만약 패턴을 사용하지 않는다면?
