# 프록시 패턴

> 다른 객체에 대한 접근을 제어하기 위한 대리자 혹은 자리채움자 (placeholder) 역할을 하는 객체를 둔다.

- 실제로 그 객체를 사용할 수 있을 때 까지 객체 생성과 초기화에 들어가는 비용 및 시간들 들이지 않겠다.
- 어떠한 객체에 접근할 때 추가적인 간접 통로를 제공.

# 등장 배경

- JPA 에서 프록시 기능은 좋음
- 객체의 간단한 상태 확인이나 행동을 하려고 하는데, 객체가 무거울 때 좀 더 메모리를 효과적으로 쓰고싶어서 등장

# 참여 객체

- Proxy
  - 실제로 참조할 대상에 대한 참조자를 관리
  - 3가지 종류가 존재
    1. 원격 프록시
    2. 가상 프록시
    3. 보호용 프록시
- Subject
  - RealSubject와 Proxy 에 공통적인 인터페이스 정의
- RealSubject
  - Proxy가 대표하는 실제 객체

# 예시

- 비행기 승객 관리 서비스
  - 비행편에 비행기 운항 정보와 모든 승객 정보를 관리
  - 승객은 비행편이 생성될 시점에 1000명의 정보가 자동 생성
  - 비행편의 운항정보만 필요할 때 승객 1000명의 정보는 필요하지 않음
  - 프록시를 이용해서 승객 정보가 진짜 필요할 때만 호출
- Proxy
  - `ProxyFlight`
- Subject
  - `Flight`
- RealSubject
  - `RealFlight`

# 장점과 단점

### 장점

- 실제 객체에 관현 연산을 수행하기 전에 전처리가 가능함
- 필요한 시점에 객체를 로드하여 성능 향상이 있음

### 단점

- 빈번한 생성이 필요로한 경우에는 객체 생성시에 한 단계 (프록시)를 거치기 때문에 성능 저하가 될 수 있음
- 로직이 난해해져 가독성이 떨어질 수 있음

# 만약 패턴을 사용하지 않는다면?

- 패턴을 사용하지 않을 떄의 복잡성을 보여줌
- 그리고 이 복잡성을 어떻게 패턴으로 끄집어 내는지 보여줌
