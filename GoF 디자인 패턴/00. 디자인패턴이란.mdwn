# 디자인 패턴

- 건축가이자 패턴의 아버지 *크리스토퍼 알렉산더*이 말 함
  - 똑같은 방법으로 두 번 하지 않고 100만번 이상 재사용할 수 있도록 하라
  - 패턴을 통해서 어떤 상황의 문제를 해결
- 재사용 가능한 객체지향 설계를 만들기 위한 유용한 공통의 설계 구조를 추상화
- 특정한 전후 관계에서 일반적 설계 문제를 해결하기 위해 상호교류하는 수정 가능한 객체와 클래스
- 장점
  - 시행착오를 줄여서 개발 시간을 단축
  - 검증된 구조로 개발하기 때문에 안정적인 개발 가능
  - 공통된 아키텍처를 공유하면 의사소통이 편해짐
- 바퀴를 다시 발명하지 마라 (Don't reinvent the wheel)
  - 이미 존재하는 기술이나 제품을 굳이 다시 만들기 위해 노력하지 말라는 인용구

# 역사

- 에릭 감마, 리차드 헬름, 랄프 존슨, 존 블리시디스가 처음으로 구체화 및 체계화
- 지금까지 소프트웨어 공학이나 현업에서 가장 많이 사용되는 디자인 패턴

# 아키텍처 패턴 vs 디자인 패턴

- 공통
  - 소프트웨어 설계를 위한 참조 모델
- 아키텍처 패턴
  - Layered Architecture, MVC, Client-Server, Pipe-Filter
  - 디자인 패턴보다 상위 수준의 설계에서 사용
  - 시스템 전체 구조를 위한 모델
- 디자인 패턴
  - Builder, Template Method, Abstract Factory, Facade, Proxy
  - 서브시스템에 속하는 컴포넌트와 그 관계를 위한 모델

# 디자인 패턴 장점과 단점

- 장점
  - 시행착오를 줄여서 개발 시간을 단축
  - 검증된 구조로 개발하기 때문에 안정적인 개발 가능
  - 공통된 아키텍처를 공유하면 의사 소통이 편리
  - 객체지향적 설계 가능
- 단점
  - 초기 설계 비용이 많이 듬
  - 맹목적으로 디자인 패턴만 따르려고 하다 비효율 발생

# 3개의 범주에 23개의 디자인 패턴

- 생성
  - 객체의 생성과 관련된 패턴
    - 주로 객체 생성과 참조를 캡슐화 하여 생성이나 변경에 다른 영향을 주지 않도록 할 때 사용
  - 추상 팩토리
  - 빌더
  - 팩토리 메서드
  - 프로토타입
  - 싱글턴
- 구조
  - 객체들을 조합해서 더 큰 구조로 만드는 패턴
    - 주로 구조가 복잡한 시스템을 개발할 때 사용
  - 어댑터
  - 브리지
  - 컴포지트
  - 데코레이터
  - 퍼사드
  - 프라이웨이트
  - 프록시
- 행위
  - 객체들이 서로 상호작용 하는 방법이나 책임 분배와 관련된 패턴
    - 주로 하나의 객체로 수행할 수 없을 때 여러 객체로 분배하면서 결합도를 최소화
  - 책임 연쇄
  - 커맨드
  - 인터프리터
  - 이터레이터 (반복자)
  - 메디에이터 (중재자)
  - 메멘토
