- 안녕하세요
- 저는 EC2, rds 로 서비스 운영을 주로 해봤고
- ci cd pipeline 구성할 때 s3 와 codedeploy, iam 를 써보았습니다

# 커맨드 패턴

> 요청 자체를 챕슐화 하여 요청이 서로 다른 사용자를 매개변수로 만들고, 요청을 대기시키거나 로깅하며 되돌릴 수 있는 연산을 지원한다.
> 실행될 기능을 캡슐화함으로써 주어진 여러 기능을 실행할 수 있는 재사용성이 높은 클래스를 설계하는 패턴

- 요청을 객체로 만들고 해당 객체에게 매개변수를 통해 다른 요청 객체를 넣을 수 있다.
- 연산을 호출하는 객체와 연산 수행 방법을 구현하는 객체와 분리한다.

# 등장 배경

# 참여 객체

- Command
  - 연산 수행에 필요한 인터페이스
- ConcreteCommand
  - Receiver 객체와 액션 간의 연결성을 정의
- Client
  - ConcreteCommand 객체를 생성하고 처리 객체로 정의
- Invoker
  - 명령어에 처리를 수행할 것을 요청
  - 요청을 실제 invoke 하는 객체
  - 기능의 실행을 요청하는 호출자
- Receiver
  - 요청의 수신자
  - ConcreteCommand 에서 execute 메서드를 구현할 때 필요한 클래스
  - ConcreteCommand의 기능을 실행하기 위해 사용되는 수신자 클래스

# 예시

- 상황
  - auto-pilot 기능을 수행하는 기존의 코드
  - auto-pilot 중에 남은 거리를 출력하는 네비겨이션이 추가될 때?
  - 이를 해결하기 위해서는 auto-pilot 에 네비게이션을 추가해야함
    - 기존 코드를 수정해야 하는 OCP 원칙에 벗어남
  - 이 때 Command 패턴을 사용
- Command
- ConcreteCommand
- Client
- Invoker
- Receiver

# 장점과 단점

### 장점

- 실행될 기능을 직접 사용하지 않고 Command 를 이용해서 기능을 캡슐화 하여 코드 수정에 자유롭다.
- 이벤트가 발생했을 때 실행될 기능이 다양하면서도 변경이 필요한 경우에 이벤트를 발생시키는 클래스를 변경하지 않고 재사용하고자 할 때 유용

### 단점

- Command 에 대한 각각의 클래스가 많아진다
