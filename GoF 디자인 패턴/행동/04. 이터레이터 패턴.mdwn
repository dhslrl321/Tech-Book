# 이터레이터 패턴

> 구현 방법을 노출하지 않고 어떤 집합 객체에 속한 원소들을 순처적으로 접근할 수 있는 방법 제공

- 커서 패턴이라고도 불림
- 객체의 내부 구현을 노출하지 않고도 자신의 원소를 접근할 수 있는 방법을 제공해야 함
  - 모든 항목에 일일이 접근하는 것이 객체 자신이 되는 것이 아니라 이터레이터 객체에서 대리 수행할 ㅅ ㅜ있도록 함
- 대표적으로 자바의 Iterator 인터페이스
- foreach 문에서 내부적으로 이터레이터를 사용함

# 등장 배경

- 반복이 필요한 여러 객체에서 스스로가 반복을 하는 것이 아니라 **반복만 수행하는 다른 객체**를 추가하여 해당 객체가 반복을 수행할 수 있도록 함
- 이렇게 되면 인터페이스나 구현이 간단해지고, 반복 작업의 관심사를 분리할 수 있음

# 참여 객체

- Iterator
  - 이터레이션을 수행할 인터페이스
- ConcreteIterator
  - Iterator 에 정의된 인터페이스를 구현하는 클래스
  - 이터레이션을 수행하는 객체에서 현재 위치를 기억함
- Aggregate
  - Iterator 객체를 생성하는 인터페이스
- ConcreteAggregate
  - 해당하는 ConcreteIterator 의 인스턴스를 반환하는 Iterator 생성 인터페이스 구현

# 예시

- Iterator
  - `Iterator`
- ConcreteIterator
  - `AirplaneIterator`
- Aggregate
  - `Aggregate`
- ConcreteAggregate
  - `AirplaneChamber`

# 장점과 단점

### 장점

- 모든 집합체에 대해서 동일한 인터페이스로 모든 원소를 순회할 수 있게 함
- 객체의 내부 구조를 모르더라도 다양한 방법으로 원소 순회를 할 수 있게 함
- 하나 이상의 순회 방법을 통일성 있게 제공함

### 단점

- 다른 디자인 패턴 보다는 아니지만 초기 설계 비용이 많이 듬
- 순회 알고리즘 구현 부분에 따라서 캡슐화의 전략을 위반할 수 있음

# 만약 패턴을 사용하지 않는다면?

- 원소 순회하는 코드가 실제 객체 구현 코드에 직접 들어가게됨
  - 이를 분리하고 재사용 가능한 템플릿을 만들기 위해선 Iterator 를 사용할 수 있음
