# 중재자 (Mediator) 패턴

> 특정 기능을 수행하기 위해 필요한 객체간 복잡한 로직을 캡슐화하여 하나의 클래스에 위임하는 패턴으로, 객체들의 집합이 어떻게 상호작용하는지 함축해놓은 객체를 생성하는 것이 목적이다.

- 복잡한 객체간의 상호작용을 단순화하는 중재자 객체를 만들어서 사용한다.
- 변화를 중재자에게 push 하면 중재자는 해당 데이터를 필요로 하는 다른 객체로 전달해줌
- Spoke-Hub 아키텍쳐와 비슷한 느낌
- 다른 객체(Spoke) 들은 다른 객체(Spoke)와 직접적인 메시시를 주고받지 않고 중재자 객체(Hub) 를 통해서 메시지를 전달한다.
- 그럼 중재자 객체(Hub)가 다른 Spoke에 전달해준다.
- Hub 는 하나 이상일 수 있다.
  - 하나만 존재한다면 중재자보다 옵저버를 이용하는 것이 좋음

# 참여 객체

- Mediator
- ConcreteMediator
- Colleague

# 예시

- 비행기가 착륙하기 위해서 착륙 가능 여부를 다른 비행기와 직접 상의하지 않고 관제탑과 통신하며 관제탑이 다른 비행기들에게 착륙 상태가 불가능이라고 알리는 형태
- Mediator
  - `ControlTower`
- Colleague
  - `Airplane`
    - `A380`
    - `Boeing747`

# 장점과 단점

### 장점

- 객체간의 의존성을 줄이기 때문에 결합도를 감소
- 객체간 협력 방법을 추상화할 수 있다.

### 단점

- 통제가 집중화되어 중재자 객체의 복잡도가 증가해 가독성이나 유지보수가 어려울 수 있다.

# 만약 패턴을 사용하지 않는다면?

- 패턴을 사용하지 않을 떄의 복잡성을 보여줌
- 그리고 이 복잡성을 어떻게 패턴으로 끄집어 내는지 보여줌
