# 데이터베이스 다중화

Keyword - `DB 다중화`, `Master-Slave`

### 목차

- 데이터베이스 다중화
  - DB 다중화란
  - Master-Slave 방식
  - Master-Slave 의 장점
  - 설계의 예시

# 데이터베이스 다중화

- **DB 다중화란**
  - 데이터 계층의 설계
- **Master-Slave 방식**
  - 가장 보편적인 다중화 방식
  - 주 (Master) 에서는 원본 데이터를 저장
    - 쓰기 연산 (Write Operation)
  - 부 (Slave) 에서는 사본 데이터를 저장
    - 읽기 연산 (Read Operation)
  - DB 에는 읽기 연산이 변경 연산보다 많기 때문에 Slave 의 수가 더 많은것이 일반적
- **Master-Slave 의 장점**
  - 더 나은 성능
    - 연산의 목적에 따라서 처리가 달라지므로 성능이 향상됨
    - query 가 병렬적으로 실행됨
  - 안정성
    - DB 서버의 일부가 사용불가 상태가 되더라도 데이터는 보존됨
  - 가용성
    - 하나의 DB 가 죽더라도 다른 서버에 있는 데이터를 가져올 수 있음
- **설계의 예시**
  - 상황 : A Master와 B Slave 가 존재할 때
  - A가 죽는다면 B가 새로운 master 가 된다
    - 만약 B 의 데이터가 최신이 아닐 경우 복구 스크립트 (recovery script) 를 통해 최신화를 시킨다
  - A Master 를 다시 살리고 원상복귀 시킨다
