# 사용자 수에 따른 확장

keyword : `데이터베이스`, `Scale-Up`, `Scale-Out`, `Load Balancer`

## 목차

- 데이터베이스
  - 데이터베이스의 종류
  - 관계형 데이터베이스
  - 비관계형 데이터베이스
  - 비관계형 데이터베이스를 선택하는 4가지 기준
- Scale-Up vs Scale-Out
  - 수평적 확장
  - 수직적 확장
- 로드밸런서
  - 정의
  - 내부 통신 구현
  - 예

# 데이터베이스

- **데이터베이스의 종류**
  1. 관계형 데이터베이스
  2. 키-값 저장소
- **관계형 데이터베이스**
  - 데이터를 테이블, 칼럼, 열로 표현하고 테이블의 관계에 따라서 Join 연산을 통해서 처리
  - ex) MySQL, Oracle, PostgreSQL
- **비관계형 데이터베이스**
  - 비관계형 데이터베이스로 NoSQL 이라고 부르고 Join 연산을 지원하지 않음
  - 4가지로 구분이 나뉨
    1. Key-Value Store
    2. Graph Store
    3. Column Store
    4. Document Store
  - ex) CouchDB, Neo4j, Cassandra, HBase, DynamoDB
- **비관계형 데이터베이스를 선택하는 4가지 기준**
  1. 아주 낮은 응답 지연시간 (Latency) 를 요구할 때
  2. 다루는 데이터가 비정형 데이터이라 관계가 서로 없을 때
  3. 데이터 (JSON, YAML, XML) 를 serialize 하거나 deserialize 할 수만 있으면 될 때
  4. 아주 많은 양의 데이터를 저장해야 할 때

# Scale-Up vs Scale-Out

- **수직적 확장 (Scale-Up, Vertical Scaling)**
  - 서버에 고사양 자원을 추가하여 성능을 개선하는 행위
  - 구성이 단순하여 서버로 유입되는 트래픽의 양이 적을 때 사용
  - 단점
    - 한 대의 서버에 무한으로 자원을 추가할 수 없음
    - 언젠간 Scale-Out을 해야함
    - 장애에 대한 failover 나 re-dundancy 방안이 없음
- **수평적 확장 (Scale-Out)**
  - 더 많은 서버를 추가하여 성능을 개선하는 행위
  - 구성이 Scale-Up 에 비해 복잡함
  - 장점
    - 장애에 대한 극복이 다양한 방법으로 존재함

# 로드밸런서

- **정의**
  - Load balancing Set 에 속한 웹 서버들에게 트래픽 부하를 고르게 분산하는 역할
  - 단일 End-Point 를 제공하고 내부적인 규칙에 따라서 실제 웹서버로 분산시켜주는 역할
- **내부 통신 구현**
- LB 만 Public IP 를 사용하고 웹 서버들에게는 Private IP 로 통신함
- **예**
  - A 와 B 의 서버가 존재할 때 A가 죽으면 LB는 B로 요청을 물리고 C 로 확장하여 로드밸런싱을 수행
