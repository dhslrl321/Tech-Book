# 캐시와 CDN

키워드 : `Cache`

### 목차

- 캐시
  - 캐시 Tier
  - 캐시 전략
  - 캐시가 적합한 상황
  - 캐시 사용시 유의할 점
- CDN

# 캐시

- **캐시 Tier**
  - 응답 시간의 개선 방법으로 데이터가 잠시 보관된 곳으로 DB 보다 훨씬 빠름
    - 주로 비싼 연산의 결과나 자주 참조되는 데이터를 저장
  - 성능 개선과 DB 의 부하를 줄임
  - 캐시의 규모를 독립적으로 확장시킬 수 있음
  - 휘발성 저장소
- **캐시 전략**
  - 읽기 주도형 캐시 전략
    - 사용자의 요청이 있을 때, 캐시 서버에 먼저 조회를 하고 캐시에 데이터가 있다면 캐시의 데이터를 반환
    - 만약 데이터가 없다면 DB 에서 해당 데이터를 읽고 캐시에 씀
  - 이외에도 다양한 전략이 존재하는데, 캐시할 데이터의 종류, 크기, 액세스 패턴에 맞는 전략들이 존재
- **캐시가 적합한 상황**
  - 데이터 갱신이 자주 일어나지는 않지만 참조가 빈번하게 일어나는 데이터가 있을 때
- **캐시 사용시 유의할 점**
  - 캐시의 만료 시기
    - 만료 기간이 짧다 : 데이터베이스에 너무 자주 접근하게 된다
    - 만료 기간이 길다 : 원본 데이터와 차이가 날 것이다
  - 일관성
    - 데이터 저장소와 원본 데이터가 차이날 때 어떻게 일관성을 유지할 것인가?
    - 이와 관련해서는 Facebook 이 내놓은 [Scaling Memcache at Facebook](https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf) 을 참고
  - 장애 대처
    - 캐시 서버를 한 대만 두는 경우는 단일 장애 지점 (SPOF) 가 될 가능성이 있음
    - 캐시를 분산시켜야함
  - 캐시 메모리는 얼마가 적당한가
    - 캐시 메모리가 작다 : eviction 이 되어 캐시의 성능이 떨어짐
    - 메모리를 과할당 (Overprovision) 하는 것이 해결 방법
  - 데이터 방출 정책은?
    - 캐시가 꽉 찼을 때 추가로 캐시에 데이터를 넣어야 할 경우 기존 캐시를 어떻게 내보낼 것인가
    - LRU 가 가장 많이 사용됨
    - 이외에도 LFU, FIFO

# 컨텐츠 전송 네트워크, CDN - Contents Delivery Network

- CDN 이란
  - 정적 컨텐츠를 전송하는 데 쓰이는 네트워크 (정적 컨텐츠의 캐시)
    - 지리적으로 분산된 서버
  - 이미지, 비디오, CSS, JS 파일등을 캐시할 수 있음
- CDN 을 사용할 때 고려할 사항
  - 비용
    - 주로 Cloud Flare와 같은 제3 업자가 중계를 하므로 적절한 비용 계산이 들어가야 함
  - 적절한 만료 시점
    - Time-Sensitive 한 데이터의 경우 만료 시점을 잘 설정해줘야 함
    - 너무 긴 경우 : 신선도가 떨어짐
    - 너무 짧은 경우 : 원본 서버 (웹서버, S3) 에 자주 접근해야 함
  - 장애의 대처 방안
    - CDN 자체가 죽었을 때 어떻게 해야하는지 고려해야함
    - CDN 이 응답하지 않을 때, 이를 감지할 수 있도록 하고 어떻게 대처할 것인지 생각해야 함
