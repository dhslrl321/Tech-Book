[개발자 책읽기] 클린 아키텍처-소프트웨어 구조와 설계의 원칙 (n장 제목)

> 해당 글은 Robert C.Martin **클린 아키텍처** 라는 책을 읽고 학습한 내용을 정리 및 회고하는 글 입니다. 자세한 사항은 [YES 24 클린 아키텍처 - 소프트웨어 구조와 설계의 원칙](http://www.yes24.com/Product/Goods/11681152) 에서 확인해주세요.

#### **클린 아키텍처** - 소프트웨어 구조와 설계의 원칙 (Robert C. Martin)

- 위키북스
- 지은이: Robert C.Martin (Uncle Bob)
- 옮긴이: 송준이

[##_Image|kage@cK8Zuq/btryV2cc4hw/4kmJPaN0AkHby75H6BhbQ0/img.png|CDM|1.3|{"originWidth":747,"originHeight":875,"style":"alignCenter","width":446,"height":522}_##]

---

# 이번 장에서 이야기하고자 하는 것

- 좋은 소프트웨어 설계의 목표는
  - 필요한 시스템을 만들고 유지보수하는 데 투입되는 인력을 최소화함에 있다
  - 즉, 나쁜 설계로 구성된 소프트웨어는 새로운 기능 출시마다 비용이 증가한다
- 지나친 과신이 가진 어리석음
  - 개발자는 자신을 과신하는 실수를 저지름
    - 코드는 나중에 정리하면 돼. 당장은 시장에 출시하는게 먼저야! 라는 거짓말
  - 이렇게 자신을 과신해서 거짓말에 속아넘어가면 나중에 코드를 정리하는 경우는 한 번도 없음
    - 시장의 압박이 절대로 수그러들지 않음
    - 바로 다음에 만들어야 할 새로운 기능이 늘 기다리고 있음
  - 지저분한 코드를 작성하면 단기간에는 빠르게 갈 수 있다고 믿음
    - 장기적으로 볼때만 생산성이 낮아진다는 견해
    - 엉망으로 만들면 깔끔하게 유지할 때보다 항상 더 느림
    - 결국 빨리 가는 유일한 방법은 제대로 가는 것임

# 나의 해석과 회고

첫장부터 나는 **'와 책 참 잘 샀다'** 라는 생각을 했다.

아직 경험이 부족한 주니어인 내가 경험한 프로젝트에서 엉클 밥이 경고한 문제들을 경험해보고 인지했었기 때문이다.

우선 책의 내용 중에서 이런 내용이 있다.

> 코드는 나중에 정리하면 되지. 당장은 시장에 출시하는게 먼저야!

스스로도 이런 말을 바로 직전 프로젝트에서 했었다.

어떤 기능을 구현할 때 엄청난 중복과 비효율적인 쓰레기들을 생성한다.
그리고서 "언젠간 리팩토링한다" 라는 마법의 단어로 마음의 짐을 가볍게 만들고 절대 리팩토링하지 않고 한 Task 는 끝이난다. 결국 한 스프린트가 끝이나고 한 프로젝트가 끝이난다.

이유는 앞서 엉클 밥이 말했듯 시장은 나에게 리팩토링을 할만한 여유를 주지 않기 때문이다.

소프트웨어 설계도 이와 마찬가지라고 한다.

우선 소프트웨어 설계를 간과하는 개발자들은 그들의 '잠들어있는 뇌' 를 이용하여 얕은 설계, 무지성 설계를 감행하고 그 핑계를 시장에 대한 독촉으로 무마한다.

이번 장은 이 책의 첫 시작을 알리며 이러한 개발자가 되지 않을 수 있다는 하나의 희망을 나에게 심어주었다.
